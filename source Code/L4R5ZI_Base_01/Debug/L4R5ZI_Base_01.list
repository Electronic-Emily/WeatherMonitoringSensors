
L4R5ZI_Base_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005668  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080058f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001bc  2000000c  080058fc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c8  080058fc  000201c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012b12  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022bb  00000000  00000000  00032b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fa0  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ea8  00000000  00000000  00035db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a6e  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005267  00000000  00000000  0003e6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004392d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000040b8  00000000  00000000  000439ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800580c 	.word	0x0800580c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800580c 	.word	0x0800580c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b97a 	b.w	8000508 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	468c      	mov	ip, r1
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	9e08      	ldr	r6, [sp, #32]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d151      	bne.n	80002e0 <__udivmoddi4+0xb4>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d96d      	bls.n	800031e <__udivmoddi4+0xf2>
 8000242:	fab2 fe82 	clz	lr, r2
 8000246:	f1be 0f00 	cmp.w	lr, #0
 800024a:	d00b      	beq.n	8000264 <__udivmoddi4+0x38>
 800024c:	f1ce 0c20 	rsb	ip, lr, #32
 8000250:	fa01 f50e 	lsl.w	r5, r1, lr
 8000254:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000258:	fa02 f70e 	lsl.w	r7, r2, lr
 800025c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000260:	fa00 f40e 	lsl.w	r4, r0, lr
 8000264:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000268:	0c25      	lsrs	r5, r4, #16
 800026a:	fbbc f8fa 	udiv	r8, ip, sl
 800026e:	fa1f f987 	uxth.w	r9, r7
 8000272:	fb0a cc18 	mls	ip, sl, r8, ip
 8000276:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027a:	fb08 f309 	mul.w	r3, r8, r9
 800027e:	42ab      	cmp	r3, r5
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x6c>
 8000282:	19ed      	adds	r5, r5, r7
 8000284:	f108 32ff 	add.w	r2, r8, #4294967295
 8000288:	f080 8123 	bcs.w	80004d2 <__udivmoddi4+0x2a6>
 800028c:	42ab      	cmp	r3, r5
 800028e:	f240 8120 	bls.w	80004d2 <__udivmoddi4+0x2a6>
 8000292:	f1a8 0802 	sub.w	r8, r8, #2
 8000296:	443d      	add	r5, r7
 8000298:	1aed      	subs	r5, r5, r3
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a8:	fb00 f909 	mul.w	r9, r0, r9
 80002ac:	45a1      	cmp	r9, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x98>
 80002b0:	19e4      	adds	r4, r4, r7
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 810a 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	f240 8107 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	eba4 0409 	sub.w	r4, r4, r9
 80002c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002cc:	2100      	movs	r1, #0
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d061      	beq.n	8000396 <__udivmoddi4+0x16a>
 80002d2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002d6:	2300      	movs	r3, #0
 80002d8:	6034      	str	r4, [r6, #0]
 80002da:	6073      	str	r3, [r6, #4]
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xc8>
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d054      	beq.n	8000392 <__udivmoddi4+0x166>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	f040 808e 	bne.w	800041a <__udivmoddi4+0x1ee>
 80002fe:	42ab      	cmp	r3, r5
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xdc>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2d0>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb65 0503 	sbc.w	r5, r5, r3
 800030e:	2001      	movs	r0, #1
 8000310:	46ac      	mov	ip, r5
 8000312:	2e00      	cmp	r6, #0
 8000314:	d03f      	beq.n	8000396 <__udivmoddi4+0x16a>
 8000316:	e886 1010 	stmia.w	r6, {r4, ip}
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b912      	cbnz	r2, 8000326 <__udivmoddi4+0xfa>
 8000320:	2701      	movs	r7, #1
 8000322:	fbb7 f7f2 	udiv	r7, r7, r2
 8000326:	fab7 fe87 	clz	lr, r7
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d134      	bne.n	800039a <__udivmoddi4+0x16e>
 8000330:	1beb      	subs	r3, r5, r7
 8000332:	0c3a      	lsrs	r2, r7, #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb3 f8f2 	udiv	r8, r3, r2
 800033e:	0c25      	lsrs	r5, r4, #16
 8000340:	fb02 3318 	mls	r3, r2, r8, r3
 8000344:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000348:	fb0c f308 	mul.w	r3, ip, r8
 800034c:	42ab      	cmp	r3, r5
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x134>
 8000350:	19ed      	adds	r5, r5, r7
 8000352:	f108 30ff 	add.w	r0, r8, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x132>
 8000358:	42ab      	cmp	r3, r5
 800035a:	f200 80d1 	bhi.w	8000500 <__udivmoddi4+0x2d4>
 800035e:	4680      	mov	r8, r0
 8000360:	1aed      	subs	r5, r5, r3
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb5 f0f2 	udiv	r0, r5, r2
 8000368:	fb02 5510 	mls	r5, r2, r0, r5
 800036c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000370:	fb0c fc00 	mul.w	ip, ip, r0
 8000374:	45a4      	cmp	ip, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x15c>
 8000378:	19e4      	adds	r4, r4, r7
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x15a>
 8000380:	45a4      	cmp	ip, r4
 8000382:	f200 80b8 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	e79d      	b.n	80002ce <__udivmoddi4+0xa2>
 8000392:	4631      	mov	r1, r6
 8000394:	4630      	mov	r0, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	f1ce 0420 	rsb	r4, lr, #32
 800039e:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003a6:	fa20 f804 	lsr.w	r8, r0, r4
 80003aa:	0c3a      	lsrs	r2, r7, #16
 80003ac:	fa25 f404 	lsr.w	r4, r5, r4
 80003b0:	ea48 0803 	orr.w	r8, r8, r3
 80003b4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003bc:	fb02 4411 	mls	r4, r2, r1, r4
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c8:	fb01 f30c 	mul.w	r3, r1, ip
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1bc>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003da:	f080 808a 	bcs.w	80004f2 <__udivmoddi4+0x2c6>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	f240 8087 	bls.w	80004f2 <__udivmoddi4+0x2c6>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443d      	add	r5, r7
 80003e8:	1aeb      	subs	r3, r5, r3
 80003ea:	fa1f f588 	uxth.w	r5, r8
 80003ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f2:	fb02 3310 	mls	r3, r2, r0, r3
 80003f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fa:	fb00 f30c 	mul.w	r3, r0, ip
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1e6>
 8000402:	19ed      	adds	r5, r5, r7
 8000404:	f100 38ff 	add.w	r8, r0, #4294967295
 8000408:	d26f      	bcs.n	80004ea <__udivmoddi4+0x2be>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d96d      	bls.n	80004ea <__udivmoddi4+0x2be>
 800040e:	3802      	subs	r0, #2
 8000410:	443d      	add	r5, r7
 8000412:	1aeb      	subs	r3, r5, r3
 8000414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000418:	e78f      	b.n	800033a <__udivmoddi4+0x10e>
 800041a:	f1c1 0720 	rsb	r7, r1, #32
 800041e:	fa22 f807 	lsr.w	r8, r2, r7
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 f401 	lsl.w	r4, r5, r1
 8000428:	ea48 0303 	orr.w	r3, r8, r3
 800042c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000430:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000434:	40fd      	lsrs	r5, r7
 8000436:	ea4e 0e04 	orr.w	lr, lr, r4
 800043a:	fbb5 f9fc 	udiv	r9, r5, ip
 800043e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000442:	fb0c 5519 	mls	r5, ip, r9, r5
 8000446:	fa1f f883 	uxth.w	r8, r3
 800044a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800044e:	fb09 f408 	mul.w	r4, r9, r8
 8000452:	42ac      	cmp	r4, r5
 8000454:	fa02 f201 	lsl.w	r2, r2, r1
 8000458:	fa00 fa01 	lsl.w	sl, r0, r1
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x244>
 800045e:	18ed      	adds	r5, r5, r3
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d243      	bcs.n	80004ee <__udivmoddi4+0x2c2>
 8000466:	42ac      	cmp	r4, r5
 8000468:	d941      	bls.n	80004ee <__udivmoddi4+0x2c2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	441d      	add	r5, r3
 8000470:	1b2d      	subs	r5, r5, r4
 8000472:	fa1f fe8e 	uxth.w	lr, lr
 8000476:	fbb5 f0fc 	udiv	r0, r5, ip
 800047a:	fb0c 5510 	mls	r5, ip, r0, r5
 800047e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45a0      	cmp	r8, r4
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x26e>
 800048a:	18e4      	adds	r4, r4, r3
 800048c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000490:	d229      	bcs.n	80004e6 <__udivmoddi4+0x2ba>
 8000492:	45a0      	cmp	r8, r4
 8000494:	d927      	bls.n	80004e6 <__udivmoddi4+0x2ba>
 8000496:	3802      	subs	r0, #2
 8000498:	441c      	add	r4, r3
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba4 0408 	sub.w	r4, r4, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	464d      	mov	r5, r9
 80004ac:	d315      	bcc.n	80004da <__udivmoddi4+0x2ae>
 80004ae:	d012      	beq.n	80004d6 <__udivmoddi4+0x2aa>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x29c>
 80004b2:	ebba 030e 	subs.w	r3, sl, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	431f      	orrs	r7, r3
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	6037      	str	r7, [r6, #0]
 80004c6:	6074      	str	r4, [r6, #4]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4618      	mov	r0, r3
 80004d0:	e6f8      	b.n	80002c4 <__udivmoddi4+0x98>
 80004d2:	4690      	mov	r8, r2
 80004d4:	e6e0      	b.n	8000298 <__udivmoddi4+0x6c>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2ea      	bcs.n	80004b0 <__udivmoddi4+0x284>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb69 0503 	sbc.w	r5, r9, r3
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7e4      	b.n	80004b0 <__udivmoddi4+0x284>
 80004e6:	4628      	mov	r0, r5
 80004e8:	e7d7      	b.n	800049a <__udivmoddi4+0x26e>
 80004ea:	4640      	mov	r0, r8
 80004ec:	e791      	b.n	8000412 <__udivmoddi4+0x1e6>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e7be      	b.n	8000470 <__udivmoddi4+0x244>
 80004f2:	4601      	mov	r1, r0
 80004f4:	e778      	b.n	80003e8 <__udivmoddi4+0x1bc>
 80004f6:	3802      	subs	r0, #2
 80004f8:	443c      	add	r4, r7
 80004fa:	e745      	b.n	8000388 <__udivmoddi4+0x15c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xe6>
 8000500:	f1a8 0802 	sub.w	r8, r8, #2
 8000504:	443d      	add	r5, r7
 8000506:	e72b      	b.n	8000360 <__udivmoddi4+0x134>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <InitSystem_Display>:
#define X_ORG 			60
#define Y_ORG 			(320-Y_WINDOW)/2
#define LINE_THICK 		10


void InitSystem_Display(){
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b09a      	sub	sp, #104	; 0x68
 8000510:	af00      	add	r7, sp, #0
	//Set up CS and C/D pin in unactive state
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	4876      	ldr	r0, [pc, #472]	; (80006f4 <InitSystem_Display+0x1e8>)
 800051a:	f001 fde5 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	4873      	ldr	r0, [pc, #460]	; (80006f4 <InitSystem_Display+0x1e8>)
 8000526:	f001 fddf 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f001 fae8 	bl	8001b00 <HAL_Delay>
	//-----------------------------------------------------

	SendCommand(SW_RESET);
 8000530:	2001      	movs	r0, #1
 8000532:	f000 fc89 	bl	8000e48 <SendCommand>

	uint8_t ext_array[3] = {0xFF,0x83,0x57};
 8000536:	4a70      	ldr	r2, [pc, #448]	; (80006f8 <InitSystem_Display+0x1ec>)
 8000538:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	4611      	mov	r1, r2
 8000540:	8019      	strh	r1, [r3, #0]
 8000542:	3302      	adds	r3, #2
 8000544:	0c12      	lsrs	r2, r2, #16
 8000546:	701a      	strb	r2, [r3, #0]
	SendCommand(SET_EXT_CMD);
 8000548:	20b9      	movs	r0, #185	; 0xb9
 800054a:	f000 fc7d 	bl	8000e48 <SendCommand>
	SendData(&ext_array[0],3);
 800054e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000552:	2103      	movs	r1, #3
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fccd 	bl	8000ef4 <SendData>

	uint8_t inter_array[4] = {0x80,0x00,0x06,0x06};
 800055a:	4b68      	ldr	r3, [pc, #416]	; (80006fc <InitSystem_Display+0x1f0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	663b      	str	r3, [r7, #96]	; 0x60
	SendCommand(SET_RGB_INTER);
 8000560:	20b3      	movs	r0, #179	; 0xb3
 8000562:	f000 fc71 	bl	8000e48 <SendCommand>
	SendData(&inter_array[0],4);
 8000566:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fcc1 	bl	8000ef4 <SendData>

	uint8_t vcom_array[1] = {0x25};
 8000572:	2325      	movs	r3, #37	; 0x25
 8000574:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	SendCommand(SET_VCOM);
 8000578:	20b6      	movs	r0, #182	; 0xb6
 800057a:	f000 fc65 	bl	8000e48 <SendCommand>
	SendData(&vcom_array[0],1);
 800057e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fcb5 	bl	8000ef4 <SendData>

	uint8_t osc_array[1] = {0x68};
 800058a:	2368      	movs	r3, #104	; 0x68
 800058c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	SendCommand(SET_OSC);
 8000590:	20b0      	movs	r0, #176	; 0xb0
 8000592:	f000 fc59 	bl	8000e48 <SendCommand>
	SendData(&osc_array[0],1);
 8000596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fca9 	bl	8000ef4 <SendData>

	uint8_t panel_array[1] = {0x05};
 80005a2:	2305      	movs	r3, #5
 80005a4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	SendCommand(SET_PANEL);
 80005a8:	20cc      	movs	r0, #204	; 0xcc
 80005aa:	f000 fc4d 	bl	8000e48 <SendCommand>
	SendData(&panel_array[0],1);
 80005ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fc9d 	bl	8000ef4 <SendData>

	uint8_t pwr_ctrl_array[6] = {0x00, 0x15, 0x1C, 0x1C, 0x83, 0xAA};
 80005ba:	4a51      	ldr	r2, [pc, #324]	; (8000700 <InitSystem_Display+0x1f4>)
 80005bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	6018      	str	r0, [r3, #0]
 80005c6:	3304      	adds	r3, #4
 80005c8:	8019      	strh	r1, [r3, #0]
	SendCommand(SET_PWR_CTRL);
 80005ca:	20b1      	movs	r0, #177	; 0xb1
 80005cc:	f000 fc3c 	bl	8000e48 <SendCommand>
	SendData(&pwr_ctrl_array[0],6);
 80005d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005d4:	2106      	movs	r1, #6
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fc8c 	bl	8000ef4 <SendData>

	uint8_t source_array[6] = {0x50, 0x50, 0x01, 0x3C, 0x1E, 0x08};
 80005dc:	4a49      	ldr	r2, [pc, #292]	; (8000704 <InitSystem_Display+0x1f8>)
 80005de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	8019      	strh	r1, [r3, #0]
	SendCommand(SET_SOURCE_OPT);
 80005ec:	20c0      	movs	r0, #192	; 0xc0
 80005ee:	f000 fc2b 	bl	8000e48 <SendCommand>
	SendData(&source_array[0],6);
 80005f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005f6:	2106      	movs	r1, #6
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fc7b 	bl	8000ef4 <SendData>

	uint8_t disp_cycle_array[7] = {0x02, 0x40, 0x00, 0x2A, 0x2A, 0x0D, 0x78};
 80005fe:	4a42      	ldr	r2, [pc, #264]	; (8000708 <InitSystem_Display+0x1fc>)
 8000600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	8019      	strh	r1, [r3, #0]
 800060e:	3302      	adds	r3, #2
 8000610:	0c0a      	lsrs	r2, r1, #16
 8000612:	701a      	strb	r2, [r3, #0]
	SendCommand(SET_DISP_CYCLE);
 8000614:	20b4      	movs	r0, #180	; 0xb4
 8000616:	f000 fc17 	bl	8000e48 <SendCommand>
	SendData(&disp_cycle_array[0],7);
 800061a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800061e:	2107      	movs	r1, #7
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fc67 	bl	8000ef4 <SendData>

	uint8_t gamma_array[34] =
 8000626:	4b39      	ldr	r3, [pc, #228]	; (800070c <InitSystem_Display+0x200>)
 8000628:	f107 0418 	add.w	r4, r7, #24
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	682b      	ldr	r3, [r5, #0]
 8000638:	8023      	strh	r3, [r4, #0]
	{0x02,0x0A,0x11,0x1D,0x23,0x35,0x41,0x4B,0x4B,0x42,0x3A,0x27,0x1B,0x08,0x09,0x03,0x02,0x0A,0x11,0x1D,0x23,0x35,0x41,0x4B,0x4B,0x42,0x3A,0x27,0x1B,0x08,0x09,0x03,0x00,0x01};
	SendCommand(SET_GAMMA_CURV);
 800063a:	20e0      	movs	r0, #224	; 0xe0
 800063c:	f000 fc04 	bl	8000e48 <SendCommand>
	SendData(&gamma_array[0],34);
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	2122      	movs	r1, #34	; 0x22
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fc54 	bl	8000ef4 <SendData>

	uint8_t pixel_inter_array[1] = {0x55};
 800064c:	2355      	movs	r3, #85	; 0x55
 800064e:	753b      	strb	r3, [r7, #20]
	SendCommand(INTR_PIX_FORM);
 8000650:	203a      	movs	r0, #58	; 0x3a
 8000652:	f000 fbf9 	bl	8000e48 <SendCommand>
	SendData(&pixel_inter_array[0],1);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc49 	bl	8000ef4 <SendData>

	uint8_t mem_acc_array[1] = {0xC0};
 8000662:	23c0      	movs	r3, #192	; 0xc0
 8000664:	743b      	strb	r3, [r7, #16]
	SendCommand(MEM_ACC_CTRL);
 8000666:	2036      	movs	r0, #54	; 0x36
 8000668:	f000 fbee 	bl	8000e48 <SendCommand>
	SendData(&mem_acc_array[0],1);
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fc3e 	bl	8000ef4 <SendData>

	uint8_t line_t_array[1] = {0x00};
 8000678:	2300      	movs	r3, #0
 800067a:	733b      	strb	r3, [r7, #12]
	SendCommand(TEAR_LINE_ON);
 800067c:	2035      	movs	r0, #53	; 0x35
 800067e:	f000 fbe3 	bl	8000e48 <SendCommand>
	SendData(&line_t_array[0],1);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fc33 	bl	8000ef4 <SendData>

	uint8_t set_tear_array[2] = {0x00,0x02};
 800068e:	2300      	movs	r3, #0
 8000690:	723b      	strb	r3, [r7, #8]
 8000692:	2302      	movs	r3, #2
 8000694:	727b      	strb	r3, [r7, #9]
	SendCommand(SET_TEAR_LINE);
 8000696:	2044      	movs	r0, #68	; 0x44
 8000698:	f000 fbd6 	bl	8000e48 <SendCommand>
	SendData(&set_tear_array[0],2);
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fc26 	bl	8000ef4 <SendData>
	HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f001 fa29 	bl	8001b00 <HAL_Delay>
	SendCommand(SLEEP_OUT);
 80006ae:	2011      	movs	r0, #17
 80006b0:	f000 fbca 	bl	8000e48 <SendCommand>
	HAL_Delay(10);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f001 fa23 	bl	8001b00 <HAL_Delay>
	SendCommand(DISP_ON);
 80006ba:	2029      	movs	r0, #41	; 0x29
 80006bc:	f000 fbc4 	bl	8000e48 <SendCommand>
	HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f001 fa1d 	bl	8001b00 <HAL_Delay>
	uint8_t mem_array[1] = {0xA0};
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	713b      	strb	r3, [r7, #4]
	SendCommand(MEM_ACC_CTRL);
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f000 fbbc 	bl	8000e48 <SendCommand>
	SendData(&mem_array[0],1);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fc0d 	bl	8000ef4 <SendData>

	//-------------------------------------------
	HAL_Delay(4);
 80006da:	2004      	movs	r0, #4
 80006dc:	f001 fa10 	bl	8001b00 <HAL_Delay>
	Fill_Display(COLOR_LIGHTBLUE);
 80006e0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80006e4:	f000 fb4a 	bl	8000d7c <Fill_Display>
	//PartialFill(YELLOW,10,100,10,2);
	//Draw_Picture(GREEN,100,24,100,24,&NORTH_COMP_24[0][0]);
	//Draw_Line(YELLOW, 10, 10, 300,300,5);


	Test_All_Arrows();
 80006e8:	f000 f862 	bl	80007b0 <Test_All_Arrows>


	//Draw_Mag_Pic(2, GREEN, 200, 12, 200, 12, &NORTH_COMP[0][0]);
	//Draw_Mag_Pic(2, GREEN, 200, 5, 200, 5, &SQUR_LINE[0][0]);
	//-----------------------------------------------------
}
 80006ec:	bf00      	nop
 80006ee:	3768      	adds	r7, #104	; 0x68
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	48001000 	.word	0x48001000
 80006f8:	08005824 	.word	0x08005824
 80006fc:	08005828 	.word	0x08005828
 8000700:	0800582c 	.word	0x0800582c
 8000704:	08005834 	.word	0x08005834
 8000708:	0800583c 	.word	0x0800583c
 800070c:	08005844 	.word	0x08005844

08000710 <Update_Dir_Display>:


void Update_Dir_Display(uint8_t dir){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	Delete_Arrow(g_Disp_Direction);
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <Update_Dir_Display+0x9c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f88d 	bl	800083e <Delete_Arrow>
	g_Disp_Direction = NONE;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <Update_Dir_Display+0x9c>)
 8000726:	2208      	movs	r2, #8
 8000728:	701a      	strb	r2, [r3, #0]

	switch(dir){
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b08      	cmp	r3, #8
 800072e:	d030      	beq.n	8000792 <Update_Dir_Display+0x82>
 8000730:	2b08      	cmp	r3, #8
 8000732:	dc06      	bgt.n	8000742 <Update_Dir_Display+0x32>
 8000734:	2b02      	cmp	r3, #2
 8000736:	d024      	beq.n	8000782 <Update_Dir_Display+0x72>
 8000738:	2b04      	cmp	r3, #4
 800073a:	d026      	beq.n	800078a <Update_Dir_Display+0x7a>
 800073c:	2b01      	cmp	r3, #1
 800073e:	d01c      	beq.n	800077a <Update_Dir_Display+0x6a>
 8000740:	e02b      	b.n	800079a <Update_Dir_Display+0x8a>
 8000742:	2b20      	cmp	r3, #32
 8000744:	d00d      	beq.n	8000762 <Update_Dir_Display+0x52>
 8000746:	2b20      	cmp	r3, #32
 8000748:	dc02      	bgt.n	8000750 <Update_Dir_Display+0x40>
 800074a:	2b10      	cmp	r3, #16
 800074c:	d005      	beq.n	800075a <Update_Dir_Display+0x4a>
 800074e:	e024      	b.n	800079a <Update_Dir_Display+0x8a>
 8000750:	2b40      	cmp	r3, #64	; 0x40
 8000752:	d00a      	beq.n	800076a <Update_Dir_Display+0x5a>
 8000754:	2b80      	cmp	r3, #128	; 0x80
 8000756:	d00c      	beq.n	8000772 <Update_Dir_Display+0x62>
 8000758:	e01f      	b.n	800079a <Update_Dir_Display+0x8a>
	case (uint8_t)COMPASS_N:
		g_Disp_Direction = NORTH;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <Update_Dir_Display+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
		break;
 8000760:	e01b      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_NE:
		g_Disp_Direction = NORTH_EAST;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <Update_Dir_Display+0x9c>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
		break;
 8000768:	e017      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_E:
		g_Disp_Direction = EAST;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <Update_Dir_Display+0x9c>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
		break;
 8000770:	e013      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_SE:
		g_Disp_Direction = SOUTH_EAST;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <Update_Dir_Display+0x9c>)
 8000774:	2203      	movs	r2, #3
 8000776:	701a      	strb	r2, [r3, #0]
		break;
 8000778:	e00f      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_S:
		g_Disp_Direction = SOUTH;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <Update_Dir_Display+0x9c>)
 800077c:	2204      	movs	r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
		break;
 8000780:	e00b      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_SW:
		g_Disp_Direction = SOUTH_WEST;
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <Update_Dir_Display+0x9c>)
 8000784:	2205      	movs	r2, #5
 8000786:	701a      	strb	r2, [r3, #0]
		break;
 8000788:	e007      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_W:
		g_Disp_Direction = WEST;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <Update_Dir_Display+0x9c>)
 800078c:	2206      	movs	r2, #6
 800078e:	701a      	strb	r2, [r3, #0]
		break;
 8000790:	e003      	b.n	800079a <Update_Dir_Display+0x8a>
	case COMPASS_NW:
		g_Disp_Direction = NORTH_WEST;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <Update_Dir_Display+0x9c>)
 8000794:	2207      	movs	r2, #7
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	bf00      	nop
	}
	Draw_Arrow(g_Disp_Direction);
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <Update_Dir_Display+0x9c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f83e 	bl	8000820 <Draw_Arrow>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001c0 	.word	0x200001c0

080007b0 <Test_All_Arrows>:



//Print all arrows at the same time then erase them
//used as start-up demo
void Test_All_Arrows(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	Draw_Arrow(NORTH);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 f833 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(NORTH_EAST);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f830 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(EAST);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 f82d 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(SOUTH_EAST);
 80007c6:	2003      	movs	r0, #3
 80007c8:	f000 f82a 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(SOUTH);
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 f827 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(SOUTH_WEST);
 80007d2:	2005      	movs	r0, #5
 80007d4:	f000 f824 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(WEST);
 80007d8:	2006      	movs	r0, #6
 80007da:	f000 f821 	bl	8000820 <Draw_Arrow>
	Draw_Arrow(NORTH_WEST);
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 f81e 	bl	8000820 <Draw_Arrow>
	HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f001 f98a 	bl	8001b00 <HAL_Delay>
	Delete_Arrow(NORTH);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 f826 	bl	800083e <Delete_Arrow>
	Delete_Arrow(NORTH_EAST);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 f823 	bl	800083e <Delete_Arrow>
	Delete_Arrow(EAST);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f000 f820 	bl	800083e <Delete_Arrow>
	Delete_Arrow(SOUTH_EAST);
 80007fe:	2003      	movs	r0, #3
 8000800:	f000 f81d 	bl	800083e <Delete_Arrow>
	Delete_Arrow(SOUTH);
 8000804:	2004      	movs	r0, #4
 8000806:	f000 f81a 	bl	800083e <Delete_Arrow>
	Delete_Arrow(SOUTH_WEST);
 800080a:	2005      	movs	r0, #5
 800080c:	f000 f817 	bl	800083e <Delete_Arrow>
	Delete_Arrow(WEST);
 8000810:	2006      	movs	r0, #6
 8000812:	f000 f814 	bl	800083e <Delete_Arrow>
	Delete_Arrow(NORTH_WEST);
 8000816:	2007      	movs	r0, #7
 8000818:	f000 f811 	bl	800083e <Delete_Arrow>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <Draw_Arrow>:

//Draw an arrow in the color not equal to the background.
void Draw_Arrow(Direction dir){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	Print_Arrow(dir, ARROW_COLOR);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f813 	bl	800085c <Print_Arrow>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <Delete_Arrow>:

//Erase arrow by re-drawing it but using the background color
void Delete_Arrow(Direction dir){
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
	Print_Arrow(dir, BACKGROUND_COLOR);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f804 	bl	800085c <Print_Arrow>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Print_Arrow>:



//Function that will draw an arrow
//Can be used to erase or draw one, based on what color you use.
void Print_Arrow(Direction dir, uint16_t color){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	80bb      	strh	r3, [r7, #4]
switch(dir){
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b07      	cmp	r3, #7
 8000870:	f200 80f4 	bhi.w	8000a5c <Print_Arrow+0x200>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <Print_Arrow+0x20>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	0800089d 	.word	0x0800089d
 8000880:	080008d7 	.word	0x080008d7
 8000884:	0800090d 	.word	0x0800090d
 8000888:	08000947 	.word	0x08000947
 800088c:	0800097d 	.word	0x0800097d
 8000890:	080009b7 	.word	0x080009b7
 8000894:	080009ed 	.word	0x080009ed
 8000898:	08000a27 	.word	0x08000a27
case NORTH:
	//MAIN
	PartialFill(color, X_WIND_CENT-(LINE_THICK/2), LINE_THICK, Y_ORG ,Y_WINDOW);
 800089c:	88b8      	ldrh	r0, [r7, #4]
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2350      	movs	r3, #80	; 0x50
 80008a4:	220a      	movs	r2, #10
 80008a6:	2187      	movs	r1, #135	; 0x87
 80008a8:	f000 f98e 	bl	8000bc8 <PartialFill>
	Draw_Line(X_WIND_CENT-30, Y__MAX-30, color,  X_WIND_CENT, Y__MAX, 8);
 80008ac:	88ba      	ldrh	r2, [r7, #4]
 80008ae:	2308      	movs	r3, #8
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	23f0      	movs	r3, #240	; 0xf0
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	238c      	movs	r3, #140	; 0x8c
 80008b8:	21d2      	movs	r1, #210	; 0xd2
 80008ba:	206e      	movs	r0, #110	; 0x6e
 80008bc:	f000 f8d4 	bl	8000a68 <Draw_Line>
	Draw_Line(X_WIND_CENT+30, Y__MAX-30, color,  X_WIND_CENT, Y__MAX, 8);
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	2308      	movs	r3, #8
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	23f0      	movs	r3, #240	; 0xf0
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	238c      	movs	r3, #140	; 0x8c
 80008cc:	21d2      	movs	r1, #210	; 0xd2
 80008ce:	20aa      	movs	r0, #170	; 0xaa
 80008d0:	f000 f8ca 	bl	8000a68 <Draw_Line>
	break;
 80008d4:	e0c3      	b.n	8000a5e <Print_Arrow+0x202>
case NORTH_EAST:
	Draw_Line(X_ORG+25, Y_ORG+25, color,  X__MAX-25, Y__MAX-25, 8);
 80008d6:	88ba      	ldrh	r2, [r7, #4]
 80008d8:	2308      	movs	r3, #8
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	23d7      	movs	r3, #215	; 0xd7
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	23c3      	movs	r3, #195	; 0xc3
 80008e2:	2169      	movs	r1, #105	; 0x69
 80008e4:	2055      	movs	r0, #85	; 0x55
 80008e6:	f000 f8bf 	bl	8000a68 <Draw_Line>
	//Horizontal
	PartialFill(color,X__MAX-25-40 , 40 , Y__MAX-25 -(LINE_THICK/2), LINE_THICK);
 80008ea:	88b8      	ldrh	r0, [r7, #4]
 80008ec:	230a      	movs	r3, #10
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	23d2      	movs	r3, #210	; 0xd2
 80008f2:	2228      	movs	r2, #40	; 0x28
 80008f4:	219b      	movs	r1, #155	; 0x9b
 80008f6:	f000 f967 	bl	8000bc8 <PartialFill>
	//Vertical
	PartialFill(color,X__MAX-25 -(LINE_THICK/2) , LINE_THICK , Y__MAX-25-40 , 40);
 80008fa:	88b8      	ldrh	r0, [r7, #4]
 80008fc:	2328      	movs	r3, #40	; 0x28
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	23af      	movs	r3, #175	; 0xaf
 8000902:	220a      	movs	r2, #10
 8000904:	21be      	movs	r1, #190	; 0xbe
 8000906:	f000 f95f 	bl	8000bc8 <PartialFill>
	break;
 800090a:	e0a8      	b.n	8000a5e <Print_Arrow+0x202>
case EAST:
	PartialFill(color, X_ORG, X_WINDOW, Y_WIND_CENT-(LINE_THICK/2), LINE_THICK);
 800090c:	88b8      	ldrh	r0, [r7, #4]
 800090e:	230a      	movs	r3, #10
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	239b      	movs	r3, #155	; 0x9b
 8000914:	22a0      	movs	r2, #160	; 0xa0
 8000916:	213c      	movs	r1, #60	; 0x3c
 8000918:	f000 f956 	bl	8000bc8 <PartialFill>
	Draw_Line(X__MAX, Y_WIND_CENT, color, X__MAX-30, Y_WIND_CENT+30, 8);
 800091c:	88ba      	ldrh	r2, [r7, #4]
 800091e:	2308      	movs	r3, #8
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	23be      	movs	r3, #190	; 0xbe
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	23be      	movs	r3, #190	; 0xbe
 8000928:	21a0      	movs	r1, #160	; 0xa0
 800092a:	20dc      	movs	r0, #220	; 0xdc
 800092c:	f000 f89c 	bl	8000a68 <Draw_Line>
	Draw_Line(X__MAX, Y_WIND_CENT, color, X__MAX-30, Y_WIND_CENT-30, 8);
 8000930:	88ba      	ldrh	r2, [r7, #4]
 8000932:	2308      	movs	r3, #8
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	2382      	movs	r3, #130	; 0x82
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	23be      	movs	r3, #190	; 0xbe
 800093c:	21a0      	movs	r1, #160	; 0xa0
 800093e:	20dc      	movs	r0, #220	; 0xdc
 8000940:	f000 f892 	bl	8000a68 <Draw_Line>
	break;
 8000944:	e08b      	b.n	8000a5e <Print_Arrow+0x202>
case SOUTH_EAST:
	Draw_Line(X_ORG+25, Y__MAX-25, color,  X__MAX-25, Y_ORG+25, 8);
 8000946:	88ba      	ldrh	r2, [r7, #4]
 8000948:	2308      	movs	r3, #8
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	2369      	movs	r3, #105	; 0x69
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	23c3      	movs	r3, #195	; 0xc3
 8000952:	21d7      	movs	r1, #215	; 0xd7
 8000954:	2055      	movs	r0, #85	; 0x55
 8000956:	f000 f887 	bl	8000a68 <Draw_Line>
	//Horizontal
	PartialFill(color,X__MAX-25-40, 40 , Y_ORG+25 -(LINE_THICK/2), LINE_THICK);
 800095a:	88b8      	ldrh	r0, [r7, #4]
 800095c:	230a      	movs	r3, #10
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	2228      	movs	r2, #40	; 0x28
 8000964:	219b      	movs	r1, #155	; 0x9b
 8000966:	f000 f92f 	bl	8000bc8 <PartialFill>
	//Vertical
	PartialFill(color,X__MAX-25 -(LINE_THICK/2) , LINE_THICK , Y_ORG+25, 40);
 800096a:	88b8      	ldrh	r0, [r7, #4]
 800096c:	2328      	movs	r3, #40	; 0x28
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2369      	movs	r3, #105	; 0x69
 8000972:	220a      	movs	r2, #10
 8000974:	21be      	movs	r1, #190	; 0xbe
 8000976:	f000 f927 	bl	8000bc8 <PartialFill>
	break;
 800097a:	e070      	b.n	8000a5e <Print_Arrow+0x202>
case SOUTH:
	PartialFill(color, X_WIND_CENT-(LINE_THICK/2), LINE_THICK, Y_ORG ,Y_WINDOW);
 800097c:	88b8      	ldrh	r0, [r7, #4]
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2350      	movs	r3, #80	; 0x50
 8000984:	220a      	movs	r2, #10
 8000986:	2187      	movs	r1, #135	; 0x87
 8000988:	f000 f91e 	bl	8000bc8 <PartialFill>
	Draw_Line(X_WIND_CENT-30, Y_ORG+30, color,  X_WIND_CENT, Y_ORG, 8);
 800098c:	88ba      	ldrh	r2, [r7, #4]
 800098e:	2308      	movs	r3, #8
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2350      	movs	r3, #80	; 0x50
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	238c      	movs	r3, #140	; 0x8c
 8000998:	216e      	movs	r1, #110	; 0x6e
 800099a:	206e      	movs	r0, #110	; 0x6e
 800099c:	f000 f864 	bl	8000a68 <Draw_Line>
	Draw_Line(X_WIND_CENT+30, Y_ORG+30, color,  X_WIND_CENT, Y_ORG, 8);
 80009a0:	88ba      	ldrh	r2, [r7, #4]
 80009a2:	2308      	movs	r3, #8
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2350      	movs	r3, #80	; 0x50
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	238c      	movs	r3, #140	; 0x8c
 80009ac:	216e      	movs	r1, #110	; 0x6e
 80009ae:	20aa      	movs	r0, #170	; 0xaa
 80009b0:	f000 f85a 	bl	8000a68 <Draw_Line>
	break;
 80009b4:	e053      	b.n	8000a5e <Print_Arrow+0x202>
case SOUTH_WEST:
	Draw_Line(X_ORG+25, Y_ORG+25, color,  X__MAX-25, Y__MAX-25, 8);
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	2308      	movs	r3, #8
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	23d7      	movs	r3, #215	; 0xd7
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	23c3      	movs	r3, #195	; 0xc3
 80009c2:	2169      	movs	r1, #105	; 0x69
 80009c4:	2055      	movs	r0, #85	; 0x55
 80009c6:	f000 f84f 	bl	8000a68 <Draw_Line>
	PartialFill(color,X_ORG+25 , 40 , Y_ORG+25 - (LINE_THICK/2)-1, LINE_THICK);
 80009ca:	88b8      	ldrh	r0, [r7, #4]
 80009cc:	230a      	movs	r3, #10
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2363      	movs	r3, #99	; 0x63
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	2155      	movs	r1, #85	; 0x55
 80009d6:	f000 f8f7 	bl	8000bc8 <PartialFill>
	PartialFill(color,X_ORG+25-(LINE_THICK/2)-1,LINE_THICK ,Y_ORG+25, 40);// LINE_THICK , Y__MAX-25-40 , 40);
 80009da:	88b8      	ldrh	r0, [r7, #4]
 80009dc:	2328      	movs	r3, #40	; 0x28
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2369      	movs	r3, #105	; 0x69
 80009e2:	220a      	movs	r2, #10
 80009e4:	214f      	movs	r1, #79	; 0x4f
 80009e6:	f000 f8ef 	bl	8000bc8 <PartialFill>
	break;
 80009ea:	e038      	b.n	8000a5e <Print_Arrow+0x202>
case WEST:
	PartialFill(color, X_ORG, X_WINDOW, Y_WIND_CENT-(LINE_THICK/2), LINE_THICK);
 80009ec:	88b8      	ldrh	r0, [r7, #4]
 80009ee:	230a      	movs	r3, #10
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	239b      	movs	r3, #155	; 0x9b
 80009f4:	22a0      	movs	r2, #160	; 0xa0
 80009f6:	213c      	movs	r1, #60	; 0x3c
 80009f8:	f000 f8e6 	bl	8000bc8 <PartialFill>
	Draw_Line(X_ORG, Y_WIND_CENT, color, X_ORG+30, Y_WIND_CENT+30, 8);
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	2308      	movs	r3, #8
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	23be      	movs	r3, #190	; 0xbe
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	235a      	movs	r3, #90	; 0x5a
 8000a08:	21a0      	movs	r1, #160	; 0xa0
 8000a0a:	203c      	movs	r0, #60	; 0x3c
 8000a0c:	f000 f82c 	bl	8000a68 <Draw_Line>
	Draw_Line(X_ORG, Y_WIND_CENT, color, X_ORG+30, Y_WIND_CENT-30, 8);
 8000a10:	88ba      	ldrh	r2, [r7, #4]
 8000a12:	2308      	movs	r3, #8
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2382      	movs	r3, #130	; 0x82
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	235a      	movs	r3, #90	; 0x5a
 8000a1c:	21a0      	movs	r1, #160	; 0xa0
 8000a1e:	203c      	movs	r0, #60	; 0x3c
 8000a20:	f000 f822 	bl	8000a68 <Draw_Line>
	break;
 8000a24:	e01b      	b.n	8000a5e <Print_Arrow+0x202>
case NORTH_WEST:
	Draw_Line(X_ORG+25, Y__MAX-25, color,  X__MAX-25, Y_ORG+25, 8);
 8000a26:	88ba      	ldrh	r2, [r7, #4]
 8000a28:	2308      	movs	r3, #8
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2369      	movs	r3, #105	; 0x69
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	23c3      	movs	r3, #195	; 0xc3
 8000a32:	21d7      	movs	r1, #215	; 0xd7
 8000a34:	2055      	movs	r0, #85	; 0x55
 8000a36:	f000 f817 	bl	8000a68 <Draw_Line>
	PartialFill(color, X_ORG+25-(LINE_THICK/2)-1, LINE_THICK ,Y__MAX-25-40, 40);
 8000a3a:	88b8      	ldrh	r0, [r7, #4]
 8000a3c:	2328      	movs	r3, #40	; 0x28
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	23af      	movs	r3, #175	; 0xaf
 8000a42:	220a      	movs	r2, #10
 8000a44:	214f      	movs	r1, #79	; 0x4f
 8000a46:	f000 f8bf 	bl	8000bc8 <PartialFill>
	PartialFill(color,X_ORG+25 , 40 , Y__MAX-25 - (LINE_THICK/2)+1, LINE_THICK);
 8000a4a:	88b8      	ldrh	r0, [r7, #4]
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	23d3      	movs	r3, #211	; 0xd3
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	2155      	movs	r1, #85	; 0x55
 8000a56:	f000 f8b7 	bl	8000bc8 <PartialFill>
	break;
 8000a5a:	e000      	b.n	8000a5e <Print_Arrow+0x202>
default:
	break;
 8000a5c:	bf00      	nop
}
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop

08000a68 <Draw_Line>:



//Draw a line with two points
void Draw_Line( uint16_t x1, uint16_t y1, uint16_t color, uint16_t x2,uint16_t y2, uint16_t width){
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b08d      	sub	sp, #52	; 0x34
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	81fb      	strh	r3, [r7, #14]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	81bb      	strh	r3, [r7, #12]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	817b      	strh	r3, [r7, #10]
 8000a82:	4613      	mov	r3, r2
 8000a84:	813b      	strh	r3, [r7, #8]
	int16_t x_range = x2-x1;
 8000a86:	893a      	ldrh	r2, [r7, #8]
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y_range = y2-y1;
 8000a90:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000a92:	89bb      	ldrh	r3, [r7, #12]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	843b      	strh	r3, [r7, #32]

	float slope = y_range/x_range;
 8000a9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000a9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aae:	edc7 7a07 	vstr	s15, [r7, #28]
	float B = -(slope*x1) + y1;
 8000ab2:	89bb      	ldrh	r3, [r7, #12]
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad2:	edc7 7a06 	vstr	s15, [r7, #24]

	x_range = abs(x_range);
 8000ad6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	847b      	strh	r3, [r7, #34]	; 0x22
	y_range = abs(y_range);
 8000ae2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	843b      	strh	r3, [r7, #32]

	for(int i = 0; i < x_range; i++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	e05f      	b.n	8000bb4 <Draw_Line+0x14c>
		//SET Coordinates
		uint16_t YY;
		if(x1<x2){
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	893b      	ldrh	r3, [r7, #8]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d22c      	bcs.n	8000b56 <Draw_Line+0xee>
			YY = (x1+i)*slope + B;
 8000afc:	89fa      	ldrh	r2, [r7, #14]
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	4413      	add	r3, r2
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	82fb      	strh	r3, [r7, #22]
			PartialFill(color, (x1+i)-(width/2) , width, YY-(width/2) , width);
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b32:	085b      	lsrs	r3, r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	8afa      	ldrh	r2, [r7, #22]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	b29c      	uxth	r4, r3
 8000b46:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b48:	8978      	ldrh	r0, [r7, #10]
 8000b4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	4623      	mov	r3, r4
 8000b50:	f000 f83a 	bl	8000bc8 <PartialFill>
 8000b54:	e02b      	b.n	8000bae <Draw_Line+0x146>
		}
		else{
			YY = (x2+i)*slope + B;
 8000b56:	893a      	ldrh	r2, [r7, #8]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	4413      	add	r3, r2
 8000b5c:	ee07 3a90 	vmov	s15, r3
 8000b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	82fb      	strh	r3, [r7, #22]
			PartialFill(color, (x2+i)-(width/2) , width, YY-(width/2) , width);
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	893b      	ldrh	r3, [r7, #8]
 8000b86:	4413      	add	r3, r2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b8c:	085b      	lsrs	r3, r3, #1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b299      	uxth	r1, r3
 8000b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b96:	085b      	lsrs	r3, r3, #1
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	8afa      	ldrh	r2, [r7, #22]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	b29c      	uxth	r4, r3
 8000ba0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000ba2:	8978      	ldrh	r0, [r7, #10]
 8000ba4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4623      	mov	r3, r4
 8000baa:	f000 f80d 	bl	8000bc8 <PartialFill>
	for(int i = 0; i < x_range; i++){
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dc9a      	bgt.n	8000af4 <Draw_Line+0x8c>
		}
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	372c      	adds	r7, #44	; 0x2c
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
	...

08000bc8 <PartialFill>:
	SendData_NoCS_8((uint8_t*)&pageVal,4);
}


//Pointing to the Bottom Left of the Rectangle
void PartialFill(uint16_t color, uint16_t x_min, uint16_t x_length, uint16_t y_min, uint16_t y_length){
 8000bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bcc:	b089      	sub	sp, #36	; 0x24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4606      	mov	r6, r0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4633      	mov	r3, r6
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80bb      	strh	r3, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	803b      	strh	r3, [r7, #0]
 8000be8:	466b      	mov	r3, sp
 8000bea:	461e      	mov	r6, r3
	uint32_t columnVal,pageVal;

	uint16_t pic_size = (x_length)*(y_length);
 8000bec:	887a      	ldrh	r2, [r7, #2]
 8000bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000bf2:	fb12 f303 	smulbb	r3, r2, r3
 8000bf6:	837b      	strh	r3, [r7, #26]
	uint16_t pic_array[pic_size];
 8000bf8:	8b79      	ldrh	r1, [r7, #26]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	b28a      	uxth	r2, r1
 8000c02:	f04f 0300 	mov.w	r3, #0
 8000c06:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8000c0a:	ea49 7912 	orr.w	r9, r9, r2, lsr #28
 8000c0e:	ea4f 1802 	mov.w	r8, r2, lsl #4
 8000c12:	b28a      	uxth	r2, r1
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	011d      	lsls	r5, r3, #4
 8000c1a:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 8000c1e:	0114      	lsls	r4, r2, #4
 8000c20:	460b      	mov	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	3301      	adds	r3, #1
 8000c26:	3307      	adds	r3, #7
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c30:	466b      	mov	r3, sp
 8000c32:	3301      	adds	r3, #1
 8000c34:	085b      	lsrs	r3, r3, #1
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	613b      	str	r3, [r7, #16]

	//Verify bounds
	if((x_min + x_length)-1 > X_MAX){
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b01      	subs	r3, #1
 8000c42:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000c46:	f280 808f 	bge.w	8000d68 <PartialFill+0x1a0>
		return; // Error Out of Bounds
	}
	if((y_min + y_length)-1 > Y_MAX){
 8000c4a:	883a      	ldrh	r2, [r7, #0]
 8000c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c50:	4413      	add	r3, r2
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c58:	f280 8088 	bge.w	8000d6c <PartialFill+0x1a4>
		return; // Error Out of Bounds
	}

	columnVal 	= (uint32_t)INT32_FLIP( (uint32_t)((x_min<<16)|(x_min + x_length-1)) );
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	041a      	lsls	r2, r3, #16
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	440b      	add	r3, r1
 8000c66:	3b01      	subs	r3, #1
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	061a      	lsls	r2, r3, #24
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	0419      	lsls	r1, r3, #16
 8000c70:	88b8      	ldrh	r0, [r7, #4]
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	4403      	add	r3, r0
 8000c76:	3b01      	subs	r3, #1
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000c80:	431a      	orrs	r2, r3
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0419      	lsls	r1, r3, #16
 8000c86:	88b8      	ldrh	r0, [r7, #4]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	4403      	add	r3, r0
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c96:	431a      	orrs	r2, r3
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	0419      	lsls	r1, r3, #16
 8000c9c:	88b8      	ldrh	r0, [r7, #4]
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	4403      	add	r3, r0
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	0e1b      	lsrs	r3, r3, #24
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
	pageVal 	= (uint32_t)INT32_FLIP( (uint32_t)((y_min<<16)|(y_min + y_length-1)) );
 8000cac:	883b      	ldrh	r3, [r7, #0]
 8000cae:	041a      	lsls	r2, r3, #16
 8000cb0:	8839      	ldrh	r1, [r7, #0]
 8000cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	061a      	lsls	r2, r3, #24
 8000cbe:	883b      	ldrh	r3, [r7, #0]
 8000cc0:	0419      	lsls	r1, r3, #16
 8000cc2:	8838      	ldrh	r0, [r7, #0]
 8000cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cc8:	4403      	add	r3, r0
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	0419      	lsls	r1, r3, #16
 8000cda:	8838      	ldrh	r0, [r7, #0]
 8000cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ce0:	4403      	add	r3, r0
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000cec:	431a      	orrs	r2, r3
 8000cee:	883b      	ldrh	r3, [r7, #0]
 8000cf0:	0419      	lsls	r1, r3, #16
 8000cf2:	8838      	ldrh	r0, [r7, #0]
 8000cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cf8:	4403      	add	r3, r0
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	0e1b      	lsrs	r3, r3, #24
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]


	for(int i = 0; i < pic_size; i++){
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	e007      	b.n	8000d1a <PartialFill+0x152>
			pic_array[i] =  color;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	88f9      	ldrh	r1, [r7, #6]
 8000d10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < pic_size; i++){
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	8b7a      	ldrh	r2, [r7, #26]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	dcf3      	bgt.n	8000d0a <PartialFill+0x142>
	}

	SendCommand(COL_ADD_SET);
 8000d22:	202a      	movs	r0, #42	; 0x2a
 8000d24:	f000 f890 	bl	8000e48 <SendCommand>
	SendData_NoCS_8((uint8_t*)&columnVal,4);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8b2 	bl	8000e98 <SendData_NoCS_8>

	SendCommand(PAGE_ADD_SET);
 8000d34:	202b      	movs	r0, #43	; 0x2b
 8000d36:	f000 f887 	bl	8000e48 <SendCommand>
	SendData_NoCS_8((uint8_t*)&pageVal,4);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f8a9 	bl	8000e98 <SendData_NoCS_8>

	SendCommand(RAM_WRITE);
 8000d46:	202c      	movs	r0, #44	; 0x2c
 8000d48:	f000 f87e 	bl	8000e48 <SendCommand>
	SendData_NoCS_16(&pic_array[0], pic_size);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	8b7a      	ldrh	r2, [r7, #26]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f8ba 	bl	8000ecc <SendData_NoCS_16>

	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <PartialFill+0x1b0>)
 8000d60:	f001 f9c2 	bl	80020e8 <HAL_GPIO_WritePin>
 8000d64:	46b5      	mov	sp, r6
 8000d66:	e003      	b.n	8000d70 <PartialFill+0x1a8>
		return; // Error Out of Bounds
 8000d68:	bf00      	nop
 8000d6a:	e000      	b.n	8000d6e <PartialFill+0x1a6>
		return; // Error Out of Bounds
 8000d6c:	bf00      	nop
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d78:	48001000 	.word	0x48001000

08000d7c <Fill_Display>:

void Fill_Display(uint16_t color){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4602      	mov	r2, r0
 8000d86:	1dbb      	adds	r3, r7, #6
 8000d88:	801a      	strh	r2, [r3, #0]
	//320 x 480
	uint8_t col_array[4] = {0x00,0x00,0x01,0xDF};
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <Fill_Display+0xc0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	uint8_t page_array[4] = {0x00,0x00,0x01,0x3F};
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <Fill_Display+0xc4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

	uint16_t second_Array[HOR_PIXEL];
	for(int i = 0; i < HOR_PIXEL; i++){
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8000da0:	e00c      	b.n	8000dbc <Fill_Display+0x40>
		second_Array[i] = color;
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8000daa:	1db9      	adds	r1, r7, #6
 8000dac:	8809      	ldrh	r1, [r1, #0]
 8000dae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < HOR_PIXEL; i++){
 8000db2:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8000db6:	3301      	adds	r3, #1
 8000db8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8000dbc:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8000dc0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000dc4:	dbed      	blt.n	8000da2 <Fill_Display+0x26>
	}

	SendCommand(COL_ADD_SET);
 8000dc6:	202a      	movs	r0, #42	; 0x2a
 8000dc8:	f000 f83e 	bl	8000e48 <SendCommand>
	SendData_NoCS_8(&col_array[0],4);
 8000dcc:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f860 	bl	8000e98 <SendData_NoCS_8>

	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fe91 	bl	8001b00 <HAL_Delay>

	SendCommand(PAGE_ADD_SET);
 8000dde:	202b      	movs	r0, #43	; 0x2b
 8000de0:	f000 f832 	bl	8000e48 <SendCommand>
	SendData_NoCS_8(&page_array[0],4);
 8000de4:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8000de8:	2104      	movs	r1, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f854 	bl	8000e98 <SendData_NoCS_8>

	HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fe85 	bl	8001b00 <HAL_Delay>

	SendCommand(RAM_WRITE);
 8000df6:	202c      	movs	r0, #44	; 0x2c
 8000df8:	f000 f826 	bl	8000e48 <SendCommand>
	for(int y = 0; y < VER_PIXEL; y++){
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8000e02:	e00b      	b.n	8000e1c <Fill_Display+0xa0>
			SendData_NoCS_16(&second_Array[0], HOR_PIXEL);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f85d 	bl	8000ecc <SendData_NoCS_16>
	for(int y = 0; y < VER_PIXEL; y++){
 8000e12:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8000e16:	3301      	adds	r3, #1
 8000e18:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8000e1c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8000e20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e24:	dbee      	blt.n	8000e04 <Fill_Display+0x88>
	}
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <Fill_Display+0xc8>)
 8000e2e:	f001 f95b 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	f507 7776 	add.w	r7, r7, #984	; 0x3d8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08005868 	.word	0x08005868
 8000e40:	0800586c 	.word	0x0800586c
 8000e44:	48001000 	.word	0x48001000

08000e48 <SendCommand>:

//Send SPI uint8_t and RESET C/D pin (indicate that its a cmd)
void SendCommand(uint8_t value){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	uint8_t stuff = value;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <SendCommand+0x48>)
 8000e5e:	f001 f943 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <SendCommand+0x48>)
 8000e6a:	f001 f93d 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &stuff, 1, 100);
 8000e6e:	f107 010f 	add.w	r1, r7, #15
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	2201      	movs	r2, #1
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <SendCommand+0x4c>)
 8000e78:	f003 fc23 	bl	80046c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <SendCommand+0x48>)
 8000e84:	f001 f930 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	48001000 	.word	0x48001000
 8000e94:	20000158 	.word	0x20000158

08000e98 <SendData_NoCS_8>:



//Send SPI uint8_t data without the Chip Select at the end of transmission
void SendData_NoCS_8(uint8_t* data, uint16_t length){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, data, length, 100);
 8000ea4:	887a      	ldrh	r2, [r7, #2]
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <SendData_NoCS_8+0x2c>)
 8000eac:	f003 fc09 	bl	80046c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <SendData_NoCS_8+0x30>)
 8000eb8:	f001 f916 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000158 	.word	0x20000158
 8000ec8:	48001000 	.word	0x48001000

08000ecc <SendData_NoCS_16>:


//Send SPI uint16_t data without the Chip Select at the end of transmission
void SendData_NoCS_16(uint16_t* data, uint16_t length){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)data, length*2, 100);
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <SendData_NoCS_16+0x24>)
 8000ee4:	f003 fbed 	bl	80046c2 <HAL_SPI_Transmit>
	//HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_SET);
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000158 	.word	0x20000158

08000ef4 <SendData>:

//Send SPI data then SET Chip Select pin high
void SendData(uint8_t* data, uint8_t length){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, data, length, 100);
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <SendData+0x3c>)
 8000f0a:	f003 fbda 	bl	80046c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <SendData+0x40>)
 8000f16:	f001 f8e7 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <SendData+0x40>)
 8000f22:	f001 f8e1 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000158 	.word	0x20000158
 8000f34:	48001000 	.word	0x48001000

08000f38 <Init_External_GPIO>:
#include "GPIO_Expander.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c2;

void Init_External_GPIO(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	//Set Pins as INPUT
	uint8_t RX_data = 0xFF;
 8000f3e:	23ff      	movs	r3, #255	; 0xff
 8000f40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_DIR ,1,&RX_data,1,100);
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2301      	movs	r3, #1
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	2201      	movs	r2, #1
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000f56:	f001 f991 	bl	800227c <HAL_I2C_Mem_Write>

	//Pull-Up Disabled
	RX_data = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_PULLUP ,1,&RX_data,1,100);
 8000f5e:	2364      	movs	r3, #100	; 0x64
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000f72:	f001 f983 	bl	800227c <HAL_I2C_Mem_Write>

	//PUll-Down Disabled
	RX_data = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_PULLDOWN ,1,&RX_data,1,100);
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	4819      	ldr	r0, [pc, #100]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000f8e:	f001 f975 	bl	800227c <HAL_I2C_Mem_Write>

	//Disable the ISRs
	RX_data = 0x00; //Enable ISR on all pins//0xFF;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_INTER_MASK ,1,&RX_data,1,100);
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000faa:	f001 f967 	bl	800227c <HAL_I2C_Mem_Write>

	//No Edge Sense (Rising/Falling/Both)
	RX_data = 0x55;//All Rising  //0x00;
 8000fae:	2355      	movs	r3, #85	; 0x55
 8000fb0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_SENSE_HIGH ,1,&RX_data,1,100);
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2206      	movs	r2, #6
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000fc6:	f001 f959 	bl	800227c <HAL_I2C_Mem_Write>

	//No Edge Sense (Rising/Falling/Both)
	RX_data = 0x55;//All rising//0x00;
 8000fca:	2355      	movs	r3, #85	; 0x55
 8000fcc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_SENSE_LOW ,1,&RX_data,1,100);
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2207      	movs	r2, #7
 8000fde:	2140      	movs	r1, #64	; 0x40
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <Init_External_GPIO+0xbc>)
 8000fe2:	f001 f94b 	bl	800227c <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_EVENT_STAT ,1,&RX_data,1,100);

	//RX_data =
	//HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_PLD_MODE ,1,&RX_data,1,100);

	ClearINT();
 8000fe6:	f000 f807 	bl	8000ff8 <ClearINT>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000078 	.word	0x20000078

08000ff8 <ClearINT>:

//Write to reg to clear all Interrupts
void ClearINT(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
	uint8_t RX_data = 0xFF;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, GPIO_IC_ADD, REG_INTER_SOURCE ,1,&RX_data,1,100);
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2208      	movs	r2, #8
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <ClearINT+0x2c>)
 8001016:	f001 f931 	bl	800227c <HAL_I2C_Mem_Write>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000078 	.word	0x20000078

08001028 <ReadPinStatus>:

//Read the status of each of the 8 pins
uint8_t ReadPinStatus(){
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
	uint8_t pins = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, (0x20 << 1), 0x00, 1, &pins, 1, 20);
 8001032:	2314      	movs	r3, #20
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <ReadPinStatus+0x2c>)
 8001046:	f001 fa2d 	bl	80024a4 <HAL_I2C_Mem_Read>
	return pins;
 800104a:	79fb      	ldrb	r3, [r7, #7]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000078 	.word	0x20000078

08001058 <Init_LightSensor>:
#include "lightSensor.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c1;

void Init_LightSensor(){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af04      	add	r7, sp, #16
	//Turn ON Light Sensor
	uint16_t tx = 0x0000;
 800105e:	2300      	movs	r3, #0
 8001060:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, VEML6035_ADD, VEML_CMD__CONFIG_REG, 1, (uint8_t*)&tx, 2, 100);
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2302      	movs	r3, #2
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dbb      	adds	r3, r7, #6
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2200      	movs	r2, #0
 8001072:	2152      	movs	r1, #82	; 0x52
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <Init_LightSensor+0x2c>)
 8001076:	f001 f901 	bl	800227c <HAL_I2C_Mem_Write>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000002c 	.word	0x2000002c

08001088 <Get_Brightness>:


//Read in brightness value from sensor
//TODO convert lux value
void Get_Brightness(uint16_t* value){
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af04      	add	r7, sp, #16
 800108e:	6078      	str	r0, [r7, #4]
	uint8_t data[3] = {};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2100      	movs	r1, #0
 8001096:	460a      	mov	r2, r1
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	460a      	mov	r2, r1
 800109c:	709a      	strb	r2, [r3, #2]
	//get Brightness from Light Sensor
	HAL_I2C_Mem_Read(&hi2c1, VEML6035_ADD, VEML_CMD__ALS_VAL, 1, (uint8_t*)&data, 2, 100);
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2302      	movs	r3, #2
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	2204      	movs	r2, #4
 80010b0:	2152      	movs	r1, #82	; 0x52
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <Get_Brightness+0x4c>)
 80010b4:	f001 f9f6 	bl	80024a4 <HAL_I2C_Mem_Read>
	*value = (uint16_t)((data[1]<<8) | data[0]);
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	801a      	strh	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000002c 	.word	0x2000002c

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	p_LCD_spi = &hspi1;
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <main+0x118>)
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <main+0x11c>)
 80010e2:	601a      	str	r2, [r3, #0]
	ButtonActiveFlag = 0;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <main+0x120>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	WindDir_Flag = 0;
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <main+0x124>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	g_Disp_Direction = NONE;
 80010f0:	4b43      	ldr	r3, [pc, #268]	; (8001200 <main+0x128>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fc8f 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f887 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 f9e3 	bl	80014c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001102:	f000 f955 	bl	80013b0 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001106:	f000 f9a1 	bl	800144c <MX_SPI1_Init>
  MX_I2C2_Init();
 800110a:	f000 f911 	bl	8001330 <MX_I2C2_Init>
  MX_I2C1_Init();
 800110e:	f000 f8cf 	bl	80012b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  Init_External_GPIO();
 8001112:	f7ff ff11 	bl	8000f38 <Init_External_GPIO>
  Init_LightSensor();
 8001116:	f7ff ff9f 	bl	8001058 <Init_LightSensor>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  //Flash All On-board LEDs Once
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	4838      	ldr	r0, [pc, #224]	; (8001204 <main+0x12c>)
 8001122:	f000 ffe1 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	4836      	ldr	r0, [pc, #216]	; (8001204 <main+0x12c>)
 800112c:	f000 ffdc 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	4834      	ldr	r0, [pc, #208]	; (8001208 <main+0x130>)
 8001136:	f000 ffd7 	bl	80020e8 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 800113a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113e:	f000 fcdf 	bl	8001b00 <HAL_Delay>

  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	482e      	ldr	r0, [pc, #184]	; (8001204 <main+0x12c>)
 800114a:	f000 ffcd 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	482c      	ldr	r0, [pc, #176]	; (8001204 <main+0x12c>)
 8001154:	f000 ffc8 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	482a      	ldr	r0, [pc, #168]	; (8001208 <main+0x130>)
 800115e:	f000 ffc3 	bl	80020e8 <HAL_GPIO_WritePin>

  uint8_t old_pinStatus = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
  uint8_t new_pinStatus = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
  uint16_t brightness = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	80bb      	strh	r3, [r7, #4]

	while(1){

		//Init Display if button if pressed
		if(ButtonActiveFlag == 1){
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <main+0x120>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d104      	bne.n	8001182 <main+0xaa>
			ButtonActiveFlag = 0;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <main+0x120>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			InitSystem_Display();
 800117e:	f7ff f9c5 	bl	800050c <InitSystem_Display>
		}

		HAL_Delay(10);
 8001182:	200a      	movs	r0, #10
 8001184:	f000 fcbc 	bl	8001b00 <HAL_Delay>

		if (WindDir_Flag == 1) {
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <main+0x124>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d11b      	bne.n	80011ca <main+0xf2>
			//Disable Wind Dir ISR.
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001192:	2017      	movs	r0, #23
 8001194:	f000 fdfb 	bl	8001d8e <HAL_NVIC_DisableIRQ>
			//Reset Flag
			WindDir_Flag = 0;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <main+0x124>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			//Blink Blue LED as a visual that a change happened on the Direction Sensor
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <main+0x12c>)
 80011a4:	f000 ffa0 	bl	80020e8 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80011a8:	2032      	movs	r0, #50	; 0x32
 80011aa:	f000 fca9 	bl	8001b00 <HAL_Delay>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <main+0x12c>)
 80011b4:	f000 ff98 	bl	80020e8 <HAL_GPIO_WritePin>
			new_pinStatus = ReadPinStatus();
 80011b8:	f7ff ff36 	bl	8001028 <ReadPinStatus>
 80011bc:	4603      	mov	r3, r0
 80011be:	71bb      	strb	r3, [r7, #6]

			//Clear GPIO exp. ISR
			ClearINT();
 80011c0:	f7ff ff1a 	bl	8000ff8 <ClearINT>

			//Enable Wind Dir ISR.
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c4:	2017      	movs	r0, #23
 80011c6:	f000 fdd4 	bl	8001d72 <HAL_NVIC_EnableIRQ>
		}

		//Update wind Direction on display if a change occurred
		if ((new_pinStatus != old_pinStatus) && (new_pinStatus != 0)) {
 80011ca:	79ba      	ldrb	r2, [r7, #6]
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d008      	beq.n	80011e4 <main+0x10c>
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <main+0x10c>
			old_pinStatus = new_pinStatus;
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	71fb      	strb	r3, [r7, #7]
			Update_Dir_Display(old_pinStatus);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa96 	bl	8000710 <Update_Dir_Display>
		}

		Get_Brightness(&brightness);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff4e 	bl	8001088 <Get_Brightness>
		if(ButtonActiveFlag == 1){
 80011ec:	e7bf      	b.n	800116e <main+0x96>
 80011ee:	bf00      	nop
 80011f0:	200001bc 	.word	0x200001bc
 80011f4:	20000158 	.word	0x20000158
 80011f8:	20000154 	.word	0x20000154
 80011fc:	20000028 	.word	0x20000028
 8001200:	200001c0 	.word	0x200001c0
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2244      	movs	r2, #68	; 0x44
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 faee 	bl	80057fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800122e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001232:	f001 fd23 	bl	8002c7c <HAL_PWREx_ControlVoltageScaling>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800123c:	f000 fa00 	bl	8001640 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001240:	2310      	movs	r3, #16
 8001242:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001254:	2301      	movs	r3, #1
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800125c:	2314      	movs	r3, #20
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fda7 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800127c:	f000 f9e0 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2303      	movs	r3, #3
 8001286:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f9b9 	bl	8003610 <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012a4:	f000 f9cc 	bl	8001640 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3758      	adds	r7, #88	; 0x58
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_I2C1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_I2C1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_I2C1_Init+0x74>)
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <MX_I2C1_Init+0x7c>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_I2C1_Init+0x74>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_I2C1_Init+0x74>)
 80012ec:	f000 ff37 	bl	800215e <HAL_I2C_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f6:	f000 f9a3 	bl	8001640 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_I2C1_Init+0x74>)
 80012fe:	f001 fc05 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001308:	f000 f99a 	bl	8001640 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_I2C1_Init+0x74>)
 8001310:	f001 fc47 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 f991 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000002c 	.word	0x2000002c
 8001328:	40005400 	.word	0x40005400
 800132c:	00909beb 	.word	0x00909beb

08001330 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MX_I2C2_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x7000F2FF;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_I2C2_Init+0x74>)
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <MX_I2C2_Init+0x7c>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_I2C2_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800136a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_I2C2_Init+0x74>)
 800136e:	f000 fef6 	bl	800215e <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001378:	f000 f962 	bl	8001640 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001380:	f001 fbc4 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800138a:	f000 f959 	bl	8001640 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_I2C2_Init+0x74>)
 8001392:	f001 fc06 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800139c:	f000 f950 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000078 	.word	0x20000078
 80013a8:	40005800 	.word	0x40005800
 80013ac:	7000f2ff 	.word	0x7000f2ff

080013b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <MX_LPUART1_UART_Init+0x98>)
 80013b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013d8:	220c      	movs	r2, #12
 80013da:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 80013fc:	f003 fc2e 	bl	8004c5c <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001406:	f000 f91b 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 800140e:	f004 f8dd 	bl	80055cc <HAL_UARTEx_SetTxFifoThreshold>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001418:	f000 f912 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 8001420:	f004 f912 	bl	8005648 <HAL_UARTEx_SetRxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 800142a:	f000 f909 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_LPUART1_UART_Init+0x94>)
 8001430:	f004 f893 	bl	800555a <HAL_UARTEx_DisableFifoMode>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 800143a:	f000 f901 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000c4 	.word	0x200000c4
 8001448:	40008000 	.word	0x40008000

0800144c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_SPI1_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001466:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800146a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI1_Init+0x74>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001482:	2208      	movs	r2, #8
 8001484:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI1_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI1_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_SPI1_Init+0x74>)
 80014ac:	f003 f868 	bl	8004580 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 f8c3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000158 	.word	0x20000158
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4a53      	ldr	r2, [pc, #332]	; (800162c <MX_GPIO_Init+0x164>)
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <MX_GPIO_Init+0x164>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <MX_GPIO_Init+0x164>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4a4d      	ldr	r2, [pc, #308]	; (800162c <MX_GPIO_Init+0x164>)
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <MX_GPIO_Init+0x164>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <MX_GPIO_Init+0x164>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <MX_GPIO_Init+0x164>)
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <MX_GPIO_Init+0x164>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <MX_GPIO_Init+0x164>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4a41      	ldr	r2, [pc, #260]	; (800162c <MX_GPIO_Init+0x164>)
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <MX_GPIO_Init+0x164>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <MX_GPIO_Init+0x164>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4a3b      	ldr	r2, [pc, #236]	; (800162c <MX_GPIO_Init+0x164>)
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_GPIO_Init+0x164>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <MX_GPIO_Init+0x164>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DATA_CMD_LCD_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800155c:	4834      	ldr	r0, [pc, #208]	; (8001630 <MX_GPIO_Init+0x168>)
 800155e:	f000 fdc3 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001568:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x16c>)
 800156a:	f000 fdbd 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	4831      	ldr	r0, [pc, #196]	; (8001638 <MX_GPIO_Init+0x170>)
 8001574:	f000 fdb8 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIND_DIR_INT_Pin */
  GPIO_InitStruct.Pin = WIND_DIR_INT_Pin;
 8001578:	2320      	movs	r3, #32
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_GPIO_Init+0x174>)
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIND_DIR_INT_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4829      	ldr	r0, [pc, #164]	; (8001630 <MX_GPIO_Init+0x168>)
 800158c:	f000 fc1a 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_GPIO_Init+0x174>)
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <MX_GPIO_Init+0x170>)
 80015a6:	f000 fc0d 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_CMD_LCD_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = DATA_CMD_LCD_Pin|LCD_CS_Pin;
 80015aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_GPIO_Init+0x168>)
 80015c4:	f000 fbfe 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin;
 80015c8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <MX_GPIO_Init+0x16c>)
 80015e2:	f000 fbef 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_GPIO_Init+0x170>)
 80015fe:	f000 fbe1 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2017      	movs	r0, #23
 8001608:	f000 fb97 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800160c:	2017      	movs	r0, #23
 800160e:	f000 fbb0 	bl	8001d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2028      	movs	r0, #40	; 0x28
 8001618:	f000 fb8f 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f000 fba8 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	48001000 	.word	0x48001000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	10210000 	.word	0x10210000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001646:	e7fe      	b.n	8001646 <Error_Handler+0x6>

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_MspInit+0x44>)
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_MspInit+0x44>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x44>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_MspInit+0x44>)
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_MspInit+0x44>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6593      	str	r3, [r2, #88]	; 0x58
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_MspInit+0x44>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0b0      	sub	sp, #192	; 0xc0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	2294      	movs	r2, #148	; 0x94
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f8a3 	bl	80057fc <memset>
  if(hi2c->Instance==I2C1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_I2C_MspInit+0x134>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13c      	bne.n	800173a <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fa4f 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016d8:	f7ff ffb2 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4a3a      	ldr	r2, [pc, #232]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170e:	2304      	movs	r3, #4
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001718:	4619      	mov	r1, r3
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <HAL_I2C_MspInit+0x13c>)
 800171c:	f000 fb52 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001738:	e03f      	b.n	80017ba <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_I2C_MspInit+0x140>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d13a      	bne.n	80017ba <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fa0d 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800175c:	f7ff ff70 	bl	8001640 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177e:	2312      	movs	r3, #18
 8001780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001790:	2304      	movs	r3, #4
 8001792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <HAL_I2C_MspInit+0x144>)
 800179e:	f000 fb11 	bl	8001dc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_I2C_MspInit+0x138>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
}
 80017ba:	bf00      	nop
 80017bc:	37c0      	adds	r7, #192	; 0xc0
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	40005800 	.word	0x40005800
 80017d4:	48001400 	.word	0x48001400

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0ae      	sub	sp, #184	; 0xb8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2294      	movs	r2, #148	; 0x94
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 ffff 	bl	80057fc <memset>
  if(huart->Instance==LPUART1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <HAL_UART_MspInit+0xb0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d13b      	bne.n	8001880 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001808:	2320      	movs	r3, #32
 800180a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800180c:	2300      	movs	r3, #0
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f002 f9ab 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001820:	f7ff ff0e 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_UART_MspInit+0xb4>)
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_UART_MspInit+0xb4>)
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_UART_MspInit+0xb4>)
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_UART_MspInit+0xb4>)
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_UART_MspInit+0xb4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_UART_MspInit+0xb4>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001854:	230c      	movs	r3, #12
 8001856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800186c:	2308      	movs	r3, #8
 800186e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 faa2 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	37b8      	adds	r7, #184	; 0xb8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40008000 	.word	0x40008000
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_SPI_MspInit+0x7c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d128      	bne.n	8001904 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f4:	2305      	movs	r3, #5
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_SPI_MspInit+0x84>)
 8001900:	f000 fa60 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013000 	.word	0x40013000
 8001910:	40021000 	.word	0x40021000
 8001914:	48001000 	.word	0x48001000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f8ac 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001970:	2020      	movs	r0, #32
 8001972:	f000 fbd1 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(WindDir_Flag == 0){
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <EXTI9_5_IRQHandler+0x20>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <EXTI9_5_IRQHandler+0x1a>
	  WindDir_Flag = 1;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <EXTI9_5_IRQHandler+0x20>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000028 	.word	0x20000028

08001990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001998:	f000 fbbe 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(ButtonActiveFlag == 0){
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <EXTI15_10_IRQHandler+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <EXTI15_10_IRQHandler+0x1c>
	  ButtonActiveFlag = 1;
 80019a6:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <EXTI15_10_IRQHandler+0x20>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  }


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000154 	.word	0x20000154

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <SystemInit+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <SystemInit+0x5c>)
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019c8:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <SystemInit+0x60>)
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <SystemInit+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <SystemInit+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <SystemInit+0x60>)
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <SystemInit+0x60>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <SystemInit+0x60>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <SystemInit+0x60>)
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <SystemInit+0x60>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SystemInit+0x60>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f000 f97e 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a28:	200f      	movs	r0, #15
 8001a2a:	f000 f80d 	bl	8001a48 <HAL_InitTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e001      	b.n	8001a3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3a:	f7ff fe05 	bl	8001648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_InitTick+0x6c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_InitTick+0x70>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_InitTick+0x6c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f999 	bl	8001daa <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d809      	bhi.n	8001a98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f955 	bl	8001d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_InitTick+0x74>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e007      	b.n	8001aa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e004      	b.n	8001aa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e001      	b.n	8001aa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	200001c4 	.word	0x200001c4

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200001c4 	.word	0x200001c4

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_Delay+0x40>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad2      	subs	r2, r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3f7      	bcc.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000008 	.word	0x20000008

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	4909      	ldr	r1, [pc, #36]	; (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	79fa      	ldrb	r2, [r7, #7]
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db10      	blt.n	8001c18 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	490b      	ldr	r1, [pc, #44]	; (8001c24 <__NVIC_DisableIRQ+0x40>)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	f002 021f 	and.w	r2, r2, #31
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c14:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	490d      	ldr	r1, [pc, #52]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	4909      	ldr	r1, [pc, #36]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	1e59      	subs	r1, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff09 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff1e 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff11 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff21 	bl	8001be4 <__NVIC_DisableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff94 	bl	8001ce0 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e166      	b.n	80020a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8158 	beq.w	800209c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d00b      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d007      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	2b11      	cmp	r3, #17
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b12      	cmp	r3, #18
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0201 	and.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0xea>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	6939      	ldr	r1, [r7, #16]
 8001ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0203 	and.w	r2, r3, #3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80b2 	beq.w	800209c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	4a61      	ldr	r2, [pc, #388]	; (80020c0 <HAL_GPIO_Init+0x2fc>)
 8001f3a:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <HAL_GPIO_Init+0x2fc>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6613      	str	r3, [r2, #96]	; 0x60
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_GPIO_Init+0x2fc>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f50:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <HAL_GPIO_Init+0x300>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f7a:	d02b      	beq.n	8001fd4 <HAL_GPIO_Init+0x210>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_GPIO_Init+0x304>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d025      	beq.n	8001fd0 <HAL_GPIO_Init+0x20c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a51      	ldr	r2, [pc, #324]	; (80020cc <HAL_GPIO_Init+0x308>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01f      	beq.n	8001fcc <HAL_GPIO_Init+0x208>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d019      	beq.n	8001fc8 <HAL_GPIO_Init+0x204>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4f      	ldr	r2, [pc, #316]	; (80020d4 <HAL_GPIO_Init+0x310>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x200>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_GPIO_Init+0x314>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1fc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4d      	ldr	r2, [pc, #308]	; (80020dc <HAL_GPIO_Init+0x318>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1f8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_GPIO_Init+0x31c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1f4>
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	e00e      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fb8:	2308      	movs	r3, #8
 8001fba:	e00c      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fbc:	2306      	movs	r3, #6
 8001fbe:	e00a      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x300>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_GPIO_Init+0x320>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_GPIO_Init+0x320>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_GPIO_Init+0x320>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <HAL_GPIO_Init+0x320>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae91 	bne.w	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	48001800 	.word	0x48001800
 80020e0:	48001c00 	.word	0x48001c00
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002104:	e002      	b.n	800210c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f806 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e080      	b.n	8002272 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fa83 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2224      	movs	r2, #36	; 0x24
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6852      	ldr	r2, [r2, #4]
 80021aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6892      	ldr	r2, [r2, #8]
 80021d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e006      	b.n	80021e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6892      	ldr	r2, [r2, #8]
 80021e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d104      	bne.n	80021f8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	68d2      	ldr	r2, [r2, #12]
 8002216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6911      	ldr	r1, [r2, #16]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6952      	ldr	r2, [r2, #20]
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6992      	ldr	r2, [r2, #24]
 800222e:	0212      	lsls	r2, r2, #8
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	69d1      	ldr	r1, [r2, #28]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6a12      	ldr	r2, [r2, #32]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	460b      	mov	r3, r1
 8002290:	813b      	strh	r3, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f040 80f9 	bne.w	8002496 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x34>
 80022aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0ed      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Mem_Write+0x4e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0e6      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d2:	f7ff fc09 	bl	8001ae8 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2319      	movs	r3, #25
 80022de:	2201      	movs	r2, #1
 80022e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fac3 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d1      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2221      	movs	r2, #33	; 0x21
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800231c:	88f8      	ldrh	r0, [r7, #6]
 800231e:	893a      	ldrh	r2, [r7, #8]
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4603      	mov	r3, r0
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f9d3 	bl	80026d8 <I2C_RequestMemoryWrite>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0a9      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2bff      	cmp	r3, #255	; 0xff
 800234c:	d90e      	bls.n	800236c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	22ff      	movs	r2, #255	; 0xff
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fba5 	bl	8002ab4 <I2C_TransferConfig>
 800236a:	e00f      	b.n	800238c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237a:	b2da      	uxtb	r2, r3
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fb94 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 faad 	bl	80028f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e07b      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d034      	beq.n	8002444 <HAL_I2C_Mem_Write+0x1c8>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d130      	bne.n	8002444 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fa3f 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04d      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d90e      	bls.n	8002424 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb49 	bl	8002ab4 <I2C_TransferConfig>
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fb38 	bl	8002ab4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d19e      	bne.n	800238c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fa8c 	bl	8002970 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e01a      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2220      	movs	r2, #32
 8002468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_I2C_Mem_Write+0x224>)
 8002476:	400b      	ands	r3, r1
 8002478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	fe00e800 	.word	0xfe00e800

080024a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80fd 	bne.w	80026c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x34>
 80024d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0f1      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Mem_Read+0x4e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0ea      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024fa:	f7ff faf5 	bl	8001ae8 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2319      	movs	r3, #25
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f9af 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d5      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2222      	movs	r2, #34	; 0x22
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002544:	88f8      	ldrh	r0, [r7, #6]
 8002546:	893a      	ldrh	r2, [r7, #8]
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f913 	bl	8002780 <I2C_RequestMemoryRead>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0ad      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d90e      	bls.n	8002594 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <HAL_I2C_Mem_Read+0x22c>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fa91 	bl	8002ab4 <I2C_TransferConfig>
 8002592:	e00f      	b.n	80025b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_I2C_Mem_Read+0x22c>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fa80 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	2104      	movs	r1, #4
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f956 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07c      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d034      	beq.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d130      	bne.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f927 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04d      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa31 	bl	8002ab4 <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa20 	bl	8002ab4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d19a      	bne.n	80025b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f974 	bl	8002970 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01a      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2220      	movs	r2, #32
 8002698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_I2C_Mem_Read+0x230>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	80002400 	.word	0x80002400
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	817b      	strh	r3, [r7, #10]
 80026ea:	460b      	mov	r3, r1
 80026ec:	813b      	strh	r3, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <I2C_RequestMemoryWrite+0xa4>)
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9d7 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8f0 	bl	80028f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e02c      	b.n	8002774 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	893a      	ldrh	r2, [r7, #8]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
 800272a:	e015      	b.n	8002758 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	0a12      	lsrs	r2, r2, #8
 8002734:	b292      	uxth	r2, r2
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	69b9      	ldr	r1, [r7, #24]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8d6 	bl	80028f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e012      	b.n	8002774 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	893a      	ldrh	r2, [r7, #8]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f884 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	80002000 	.word	0x80002000

08002780 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	817b      	strh	r3, [r7, #10]
 8002792:	460b      	mov	r3, r1
 8002794:	813b      	strh	r3, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	8979      	ldrh	r1, [r7, #10]
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <I2C_RequestMemoryRead+0xa4>)
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f984 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f89d 	bl	80028f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e02c      	b.n	800281a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	893a      	ldrh	r2, [r7, #8]
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
 80027d0:	e015      	b.n	80027fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	893a      	ldrh	r2, [r7, #8]
 80027d8:	0a12      	lsrs	r2, r2, #8
 80027da:	b292      	uxth	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f883 	bl	80028f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e012      	b.n	800281a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	893a      	ldrh	r2, [r7, #8]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2200      	movs	r2, #0
 8002806:	2140      	movs	r1, #64	; 0x40
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f831 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	80002000 	.word	0x80002000

08002828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	d103      	bne.n	8002846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6992      	ldr	r2, [r2, #24]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	619a      	str	r2, [r3, #24]
  }
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e022      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d01e      	beq.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f92d 	bl	8001ae8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d802      	bhi.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e00f      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	401a      	ands	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d0cd      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028fc:	e02c      	b.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f870 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e02a      	b.n	8002968 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d01e      	beq.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7ff f8e5 	bl	8001ae8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d802      	bhi.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d113      	bne.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d1cb      	bne.n	80028fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800297c:	e028      	b.n	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f830 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e026      	b.n	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7ff f8a9 	bl	8001ae8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1ad2      	subs	r2, r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d802      	bhi.n	80029a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d113      	bne.n	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d1cf      	bne.n	800297e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d151      	bne.n	8002aa6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a02:	e022      	b.n	8002a4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d01e      	beq.n	8002a4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0c:	f7ff f86c 	bl	8001ae8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d802      	bhi.n	8002a22 <I2C_IsAcknowledgeFailed+0x3a>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d113      	bne.n	8002a4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e02e      	b.n	8002aa8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d1d5      	bne.n	8002a04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fedd 	bl	8002828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f043 0204 	orr.w	r2, r3, #4
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	0d5b      	lsrs	r3, r3, #21
 8002ad4:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <I2C_TransferConfig+0x54>)
 8002ada:	4303      	orrs	r3, r0
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002ae6:	7a7b      	ldrb	r3, [r7, #9]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002aee:	4318      	orrs	r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4318      	orrs	r0, r3
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	4303      	orrs	r3, r0
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	03ff63ff 	.word	0x03ff63ff

08002b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d138      	bne.n	8002b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e032      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d139      	bne.n	8002c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e033      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	; 0x24
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d102      	bne.n	8002c54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c52:	e00b      	b.n	8002c6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	d102      	bne.n	8002c6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c68:	e000      	b.n	8002c6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40007000 	.word	0x40007000

08002c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d141      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c96:	d131      	bne.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2232      	movs	r2, #50	; 0x32
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9b      	lsrs	r3, r3, #18
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cce:	e002      	b.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce2:	d102      	bne.n	8002cea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cea:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d158      	bne.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e057      	b.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d0c:	e04d      	b.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d14:	d141      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d16:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d131      	bne.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d24:	4a24      	ldr	r2, [pc, #144]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2232      	movs	r2, #50	; 0x32
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5a:	e002      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d102      	bne.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f2      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d112      	bne.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e011      	b.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d98:	e007      	b.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f000 bc16 	b.w	8003604 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd8:	4ba0      	ldr	r3, [pc, #640]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de2:	4b9e      	ldr	r3, [pc, #632]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80e4 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4c>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	f040 808b 	bne.w	8002f1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 8087 	bne.w	8002f1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_OscConfig+0x64>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e3ed      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_RCC_OscConfig+0x7e>
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	e005      	b.n	8002e4e <HAL_RCC_OscConfig+0x8a>
 8002e42:	4b86      	ldr	r3, [pc, #536]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d923      	bls.n	8002e9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fdc8 	bl	80039ec <RCC_SetFlashLatencyFromMSIRange>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e3ce      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e66:	4a7d      	ldr	r2, [pc, #500]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e68:	4b7c      	ldr	r3, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	497a      	ldr	r1, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e74:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e84:	4975      	ldr	r1, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e86:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e025      	b.n	8002ee6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9a:	4a70      	ldr	r2, [pc, #448]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	496d      	ldr	r1, [pc, #436]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	4968      	ldr	r1, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002eba:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fd88 	bl	80039ec <RCC_SetFlashLatencyFromMSIRange>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e38e      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee6:	f000 fcbf 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8002eea:	4601      	mov	r1, r0
 8002eec:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x29c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	fa21 f303 	lsr.w	r3, r1, r3
 8002f02:	4a58      	ldr	r2, [pc, #352]	; (8003064 <HAL_RCC_OscConfig+0x2a0>)
 8002f04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f06:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_OscConfig+0x2a4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fd9c 	bl	8001a48 <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d052      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	e372      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d032      	beq.n	8002f8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f26:	4a4d      	ldr	r2, [pc, #308]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f28:	4b4c      	ldr	r3, [pc, #304]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fdd9 	bl	8001ae8 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fdd5 	bl	8001ae8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e35b      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f4c:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f58:	4a40      	ldr	r2, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f5a:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	493d      	ldr	r1, [pc, #244]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f76:	4939      	ldr	r1, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f78:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
 8002f8a:	e01a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f8c:	4a33      	ldr	r2, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f8e:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fda6 	bl	8001ae8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fda2 	bl	8001ae8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e328      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1dc>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d073      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x21c>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d063      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d15f      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e305      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d106      	bne.n	8003010 <HAL_RCC_OscConfig+0x24c>
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0x288>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x270>
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_RCC_OscConfig+0x298>)
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCC_OscConfig+0x298>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4a0d      	ldr	r2, [pc, #52]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x298>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0x288>
 8003034:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4a06      	ldr	r2, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x298>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fd48 	bl	8001ae8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	e010      	b.n	800307e <HAL_RCC_OscConfig+0x2ba>
 800305c:	40021000 	.word	0x40021000
 8003060:	08005870 	.word	0x08005870
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fd3c 	bl	8001ae8 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e2c2      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307e:	4baf      	ldr	r3, [pc, #700]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x2a8>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fd2c 	bl	8001ae8 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe fd28 	bl	8001ae8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e2ae      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a6:	4ba5      	ldr	r3, [pc, #660]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x2d0>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d060      	beq.n	8003184 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x310>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d4:	4b99      	ldr	r3, [pc, #612]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x328>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e28b      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4993      	ldr	r1, [pc, #588]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80030ee:	4b93      	ldr	r3, [pc, #588]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	e040      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310a:	4a8c      	ldr	r2, [pc, #560]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800310c:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fce7 	bl	8001ae8 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe fce3 	bl	8001ae8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e269      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003130:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	497f      	ldr	r1, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800313e:	4b7f      	ldr	r3, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	e018      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003154:	4b79      	ldr	r3, [pc, #484]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fcc3 	bl	8001ae8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fcbf 	bl	8001ae8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e245      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03c      	beq.n	800320a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	4a68      	ldr	r2, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800319a:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fc9e 	bl	8001ae8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe fc9a 	bl	8001ae8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e220      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c2:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3ec>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d2:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80031d4:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fc81 	bl	8001ae8 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe fc7d 	bl	8001ae8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e203      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fc:	4b4f      	ldr	r3, [pc, #316]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ef      	bne.n	80031ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a6 	beq.w	8003364 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800321c:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4a44      	ldr	r2, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	; 0x58
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x578>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x57c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x57c>)
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x57c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325c:	f7fe fc44 	bl	8001ae8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fe fc40 	bl	8001ae8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1c6      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003276:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_RCC_OscConfig+0x57c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x4d8>
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329a:	e024      	b.n	80032e6 <HAL_RCC_OscConfig+0x522>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d110      	bne.n	80032c6 <HAL_RCC_OscConfig+0x502>
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c4:	e00f      	b.n	80032e6 <HAL_RCC_OscConfig+0x522>
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d6:	4a19      	ldr	r2, [pc, #100]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_OscConfig+0x578>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe fbfb 	bl	8001ae8 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fbf7 	bl	8001ae8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e17b      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x578>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ed      	beq.n	80032f6 <HAL_RCC_OscConfig+0x532>
 800331a:	e01a      	b.n	8003352 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe fbe4 	bl	8001ae8 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003322:	e00f      	b.n	8003344 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe fbe0 	bl	8001ae8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d906      	bls.n	8003344 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e164      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003344:	4ba8      	ldr	r3, [pc, #672]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e8      	bne.n	8003324 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4aa3      	ldr	r2, [pc, #652]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800335a:	4ba3      	ldr	r3, [pc, #652]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d03c      	beq.n	80033ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003378:	4a9b      	ldr	r2, [pc, #620]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800337a:	4b9b      	ldr	r3, [pc, #620]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800337c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fbae 	bl	8001ae8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003390:	f7fe fbaa 	bl	8001ae8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e130      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a2:	4b91      	ldr	r3, [pc, #580]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80033a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ef      	beq.n	8003390 <HAL_RCC_OscConfig+0x5cc>
 80033b0:	e01b      	b.n	80033ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033b2:	4a8d      	ldr	r2, [pc, #564]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80033b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c2:	f7fe fb91 	bl	8001ae8 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ca:	f7fe fb8d 	bl	8001ae8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e113      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80033de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ef      	bne.n	80033ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8107 	beq.w	8003602 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	f040 80cb 	bne.w	8003594 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033fe:	4b7a      	ldr	r3, [pc, #488]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	429a      	cmp	r2, r3
 8003410:	d12c      	bne.n	800346c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	3b01      	subs	r3, #1
 800341e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d123      	bne.n	800346c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d11b      	bne.n	800346c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d113      	bne.n	800346c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	3b01      	subs	r3, #1
 8003452:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d109      	bne.n	800346c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	3b01      	subs	r3, #1
 8003466:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d06d      	beq.n	8003548 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d068      	beq.n	8003544 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800347e:	4b5a      	ldr	r3, [pc, #360]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0ba      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800348e:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003490:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003498:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800349a:	f7fe fb25 	bl	8001ae8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe fb21 	bl	8001ae8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0a7      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4849      	ldr	r0, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCC_OscConfig+0x828>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034dc:	0212      	lsls	r2, r2, #8
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034e4:	0852      	lsrs	r2, r2, #1
 80034e6:	3a01      	subs	r2, #1
 80034e8:	0552      	lsls	r2, r2, #21
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034f0:	0852      	lsrs	r2, r2, #1
 80034f2:	3a01      	subs	r2, #1
 80034f4:	0652      	lsls	r2, r2, #25
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fc:	06d2      	lsls	r2, r2, #27
 80034fe:	430a      	orrs	r2, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003506:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003510:	4a35      	ldr	r2, [pc, #212]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003512:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800351c:	f7fe fae4 	bl	8001ae8 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fae0 	bl	8001ae8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e066      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003542:	e05e      	b.n	8003602 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e05d      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d156      	bne.n	8003602 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003554:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800356c:	f7fe fabc 	bl	8001ae8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fab8 	bl	8001ae8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e03e      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x7b0>
 8003592:	e036      	b.n	8003602 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d031      	beq.n	80035fe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035b2:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f023 0303 	bic.w	r3, r3, #3
 80035bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x824>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fa8b 	bl	8001ae8 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	e00c      	b.n	80035f0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fa87 	bl	8001ae8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d905      	bls.n	80035f0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e00d      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
 80035e8:	40021000 	.word	0x40021000
 80035ec:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_OscConfig+0x848>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ec      	bne.n	80035d6 <HAL_RCC_OscConfig+0x812>
 80035fc:	e001      	b.n	8003602 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e10f      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b89      	ldr	r3, [pc, #548]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d210      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4986      	ldr	r1, [pc, #536]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003638:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 020f 	bic.w	r2, r3, #15
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b82      	ldr	r3, [pc, #520]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0f7      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8089 	beq.w	8003778 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d133      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	4b79      	ldr	r3, [pc, #484]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0e4      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800367e:	f000 fa0f 	bl	8003aa0 <RCC_GetSysClockFreqFromPLLSource>
 8003682:	4602      	mov	r2, r0
 8003684:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_ClockConfig+0x248>)
 8003686:	429a      	cmp	r2, r3
 8003688:	d955      	bls.n	8003736 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003696:	4a6f      	ldr	r2, [pc, #444]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003698:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e044      	b.n	8003736 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03e      	beq.n	8003736 <HAL_RCC_ClockConfig+0x126>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d13a      	bne.n	8003736 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036c0:	4a64      	ldr	r2, [pc, #400]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e02f      	b.n	8003736 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0ac      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	4b57      	ldr	r3, [pc, #348]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0a0      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e098      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003716:	f000 f8a7 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <HAL_RCC_ClockConfig+0x248>)
 800371e:	429a      	cmp	r2, r3
 8003720:	d909      	bls.n	8003736 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4a4c      	ldr	r2, [pc, #304]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4947      	ldr	r1, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 0203 	bic.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fe f9ce 	bl	8001ae8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fe f9ca 	bl	8001ae8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e070      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4933      	ldr	r1, [pc, #204]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
 8003796:	e008      	b.n	80037aa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d105      	bne.n	80037aa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800379e:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d910      	bls.n	80037da <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b8:	4925      	ldr	r1, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 020f 	bic.w	r2, r3, #15
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e036      	b.n	8003848 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003804:	4913      	ldr	r1, [pc, #76]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003818:	f000 f826 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 800381c:	4601      	mov	r1, r0
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_RCC_ClockConfig+0x24c>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa21 f303 	lsr.w	r3, r1, r3
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x250>)
 8003836:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x254>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe f903 	bl	8001a48 <HAL_InitTick>
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]

  return status;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40022000 	.word	0x40022000
 8003854:	40021000 	.word	0x40021000
 8003858:	04c4b400 	.word	0x04c4b400
 800385c:	08005870 	.word	0x08005870
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x34>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d121      	bne.n	80038da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d11e      	bne.n	80038da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800389c:	4b33      	ldr	r3, [pc, #204]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038a8:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038b8:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038e0:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e004      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038ec:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d133      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0xa4>
 8003906:	2b03      	cmp	r3, #3
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0xaa>
 800390a:	e005      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCC_GetSysClockFreq+0x10c>)
 800390e:	617b      	str	r3, [r7, #20]
      break;
 8003910:	e005      	b.n	800391e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_GetSysClockFreq+0x110>)
 8003914:	617b      	str	r3, [r7, #20]
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	617b      	str	r3, [r7, #20]
      break;
 800391c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	3301      	adds	r3, #1
 800392a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	fb02 f203 	mul.w	r2, r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_GetSysClockFreq+0x104>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0e5b      	lsrs	r3, r3, #25
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800395e:	69bb      	ldr	r3, [r7, #24]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3724      	adds	r7, #36	; 0x24
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40021000 	.word	0x40021000
 8003970:	08005888 	.word	0x08005888
 8003974:	00f42400 	.word	0x00f42400
 8003978:	007a1200 	.word	0x007a1200

0800397c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_GetHCLKFreq+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000000 	.word	0x20000000

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003998:	f7ff fff0 	bl	800397c <HAL_RCC_GetHCLKFreq>
 800399c:	4601      	mov	r1, r0
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039aa:	5cd3      	ldrb	r3, [r2, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08005880 	.word	0x08005880

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039c4:	f7ff ffda 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c8:	4601      	mov	r1, r0
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0adb      	lsrs	r3, r3, #11
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08005880 	.word	0x08005880

080039ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a04:	f7ff f91a 	bl	8002c3c <HAL_PWREx_GetVoltageRange>
 8003a08:	6178      	str	r0, [r7, #20]
 8003a0a:	e014      	b.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a24:	f7ff f90a 	bl	8002c3c <HAL_PWREx_GetVoltageRange>
 8003a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d10b      	bne.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d913      	bls.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2ba0      	cmp	r3, #160	; 0xa0
 8003a48:	d902      	bls.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e00d      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a50:	2301      	movs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e00a      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b7f      	cmp	r3, #127	; 0x7f
 8003a5a:	d902      	bls.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e004      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b70      	cmp	r3, #112	; 0x70
 8003a66:	d101      	bne.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a68:	2301      	movs	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a6c:	490b      	ldr	r1, [pc, #44]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d118      	bne.n	8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d107      	bne.n	8003ad2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e005      	b.n	8003ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d002      	beq.n	8003afe <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d003      	beq.n	8003b04 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003afc:	e005      	b.n	8003b0a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b00:	613b      	str	r3, [r7, #16]
    break;
 8003b02:	e005      	b.n	8003b10 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003b06:	613b      	str	r3, [r7, #16]
    break;
 8003b08:	e002      	b.n	8003b10 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
    break;
 8003b0e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	fb02 f203 	mul.w	r2, r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0e5b      	lsrs	r3, r3, #25
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	3301      	adds	r3, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b50:	683b      	ldr	r3, [r7, #0]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08005888 	.word	0x08005888
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d00b      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d804      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ba0:	e01d      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ba2:	2b60      	cmp	r3, #96	; 0x60
 8003ba4:	d01e      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d01c      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003baa:	e018      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bac:	4a86      	ldr	r2, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bae:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb8:	e015      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fafd 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bca:	e00c      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3320      	adds	r3, #32
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fbe4 	bl	80043a0 <RCCEx_PLLSAI2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bdc:	e003      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	74fb      	strb	r3, [r7, #19]
      break;
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bec:	4976      	ldr	r1, [pc, #472]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bf4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d042      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d00f      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c22:	d805      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d011      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d017      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003c2e:	e01f      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d01c      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c3c:	e018      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c3e:	4a62      	ldr	r2, [pc, #392]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4a:	e015      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fab4 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3320      	adds	r3, #32
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fb9b 	bl	80043a0 <RCCEx_PLLSAI2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	74fb      	strb	r3, [r7, #19]
      break;
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c7e:	4952      	ldr	r1, [pc, #328]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c80:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c94:	e001      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 809f 	beq.w	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cc4:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cce:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fefd 	bl	8001ae8 <HAL_GetTick>
 8003cee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf0:	e009      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf2:	f7fd fef9 	bl	8001ae8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d902      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	74fb      	strb	r3, [r7, #19]
        break;
 8003d04:	e005      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ef      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15b      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01f      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d019      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d42:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd feb8 	bl	8001ae8 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fd feb4 	bl	8001ae8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d902      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	74fb      	strb	r3, [r7, #19]
            break;
 8003d92:	e006      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ec      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da8:	4907      	ldr	r1, [pc, #28]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	74bb      	strb	r3, [r7, #18]
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd4:	7c7b      	ldrb	r3, [r7, #17]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4aa0      	ldr	r2, [pc, #640]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	4b9f      	ldr	r3, [pc, #636]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df2:	499a      	ldr	r1, [pc, #616]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4b99      	ldr	r3, [pc, #612]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e14:	4991      	ldr	r1, [pc, #580]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4b91      	ldr	r3, [pc, #580]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f023 020c 	bic.w	r2, r3, #12
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e36:	4989      	ldr	r1, [pc, #548]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e58:	4980      	ldr	r1, [pc, #512]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4b80      	ldr	r3, [pc, #512]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7a:	4978      	ldr	r1, [pc, #480]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4b77      	ldr	r3, [pc, #476]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e9c:	496f      	ldr	r1, [pc, #444]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	4b6f      	ldr	r3, [pc, #444]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ebe:	4967      	ldr	r1, [pc, #412]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee0:	495e      	ldr	r1, [pc, #376]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4b5e      	ldr	r3, [pc, #376]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f02:	4956      	ldr	r1, [pc, #344]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4b55      	ldr	r3, [pc, #340]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f46:	4945      	ldr	r1, [pc, #276]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4b44      	ldr	r3, [pc, #272]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f68:	493c      	ldr	r1, [pc, #240]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f70:	f023 0203 	bic.w	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d028      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb4:	60d3      	str	r3, [r2, #12]
 8003fb6:	e011      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f8f9 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d04d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff0:	d108      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004002:	e012      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004004:	4a15      	ldr	r2, [pc, #84]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800400c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004010:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004014:	4911      	ldr	r1, [pc, #68]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004032:	d106      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
 8004040:	e020      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800404a:	d109      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800404c:	4a03      	ldr	r2, [pc, #12]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004056:	60d3      	str	r3, [r2, #12]
 8004058:	e014      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004068:	d10c      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 f8a5 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d028      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004090:	494a      	ldr	r1, [pc, #296]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d106      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4a42      	ldr	r2, [pc, #264]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040b2:	4b42      	ldr	r3, [pc, #264]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
 80040bc:	e011      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f876 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01e      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ee:	4933      	ldr	r1, [pc, #204]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004110:	d10c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f851 	bl	80041c0 <RCCEx_PLLSAI1_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004138:	4920      	ldr	r1, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800413c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004140:	f023 0204 	bic.w	r2, r3, #4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800415c:	4917      	ldr	r1, [pc, #92]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004164:	f023 0218 	bic.w	r2, r3, #24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000

080041c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ce:	4b70      	ldr	r3, [pc, #448]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0203 	and.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d103      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
       ||
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d13f      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e03c      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d00c      	beq.n	800421a <RCCEx_PLLSAI1_Config+0x5a>
 8004200:	2b03      	cmp	r3, #3
 8004202:	d013      	beq.n	800422c <RCCEx_PLLSAI1_Config+0x6c>
 8004204:	2b01      	cmp	r3, #1
 8004206:	d120      	bne.n	800424a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11d      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e01a      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800421a:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e013      	b.n	8004254 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800422c:	4b58      	ldr	r3, [pc, #352]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004238:	4b55      	ldr	r3, [pc, #340]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004248:	e006      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      break;
 800424e:	e004      	b.n	800425a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004258:	bf00      	nop
    }

    if(status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d108      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004260:	494b      	ldr	r1, [pc, #300]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004262:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 8086 	bne.w	8004386 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800427a:	4a45      	ldr	r2, [pc, #276]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800427c:	4b44      	ldr	r3, [pc, #272]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fd fc2f 	bl	8001ae8 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800428c:	e009      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428e:	f7fd fc2b 	bl	8001ae8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	73fb      	strb	r3, [r7, #15]
        break;
 80042a0:	e005      	b.n	80042ae <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a2:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ef      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d168      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ba:	4835      	ldr	r0, [pc, #212]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042bc:	4b34      	ldr	r3, [pc, #208]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <RCCEx_PLLSAI1_Config+0x1d4>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6892      	ldr	r2, [r2, #8]
 80042c8:	0211      	lsls	r1, r2, #8
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	06d2      	lsls	r2, r2, #27
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	430a      	orrs	r2, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	6103      	str	r3, [r0, #16]
 80042e0:	e02d      	b.n	800433e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d115      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e8:	4829      	ldr	r0, [pc, #164]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	0211      	lsls	r1, r2, #8
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6912      	ldr	r2, [r2, #16]
 80042fc:	0852      	lsrs	r2, r2, #1
 80042fe:	3a01      	subs	r2, #1
 8004300:	0552      	lsls	r2, r2, #21
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6852      	ldr	r2, [r2, #4]
 8004308:	3a01      	subs	r2, #1
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	430a      	orrs	r2, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	6103      	str	r3, [r0, #16]
 8004312:	e014      	b.n	800433e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004314:	481e      	ldr	r0, [pc, #120]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <RCCEx_PLLSAI1_Config+0x1dc>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6892      	ldr	r2, [r2, #8]
 8004322:	0211      	lsls	r1, r2, #8
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6952      	ldr	r2, [r2, #20]
 8004328:	0852      	lsrs	r2, r2, #1
 800432a:	3a01      	subs	r2, #1
 800432c:	0652      	lsls	r2, r2, #25
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6852      	ldr	r2, [r2, #4]
 8004334:	3a01      	subs	r2, #1
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	430a      	orrs	r2, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004348:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fd fbcd 	bl	8001ae8 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004350:	e009      	b.n	8004366 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004352:	f7fd fbc9 	bl	8001ae8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d902      	bls.n	8004366 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	73fb      	strb	r3, [r7, #15]
          break;
 8004364:	e005      	b.n	8004372 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0ef      	beq.n	8004352 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d106      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004378:	4905      	ldr	r1, [pc, #20]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <RCCEx_PLLSAI1_Config+0x1d0>)
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	07ff800f 	.word	0x07ff800f
 8004398:	ff9f800f 	.word	0xff9f800f
 800439c:	f9ff800f 	.word	0xf9ff800f

080043a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ae:	4b70      	ldr	r3, [pc, #448]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00e      	beq.n	80043d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043ba:	4b6d      	ldr	r3, [pc, #436]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0203 	and.w	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d103      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
       ||
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d13f      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	e03c      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d00c      	beq.n	80043fa <RCCEx_PLLSAI2_Config+0x5a>
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d013      	beq.n	800440c <RCCEx_PLLSAI2_Config+0x6c>
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d120      	bne.n	800442a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e01a      	b.n	8004430 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440a:	e013      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800440c:	4b58      	ldr	r3, [pc, #352]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10f      	bne.n	8004438 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004418:	4b55      	ldr	r3, [pc, #340]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004428:	e006      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
      break;
 800442e:	e004      	b.n	800443a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004430:	bf00      	nop
 8004432:	e002      	b.n	800443a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004434:	bf00      	nop
 8004436:	e000      	b.n	800443a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004438:	bf00      	nop
    }

    if(status == HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d108      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004440:	494b      	ldr	r1, [pc, #300]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004442:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8086 	bne.w	8004566 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800445a:	4a45      	ldr	r2, [pc, #276]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800445c:	4b44      	ldr	r3, [pc, #272]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004466:	f7fd fb3f 	bl	8001ae8 <HAL_GetTick>
 800446a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446c:	e009      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800446e:	f7fd fb3b 	bl	8001ae8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	73fb      	strb	r3, [r7, #15]
        break;
 8004480:	e005      	b.n	800448e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ef      	bne.n	800446e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d168      	bne.n	8004566 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449a:	4835      	ldr	r0, [pc, #212]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	4b34      	ldr	r3, [pc, #208]	; (8004574 <RCCEx_PLLSAI2_Config+0x1d4>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	06d2      	lsls	r2, r2, #27
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	430a      	orrs	r2, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	6143      	str	r3, [r0, #20]
 80044c0:	e02d      	b.n	800451e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d115      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c8:	4829      	ldr	r0, [pc, #164]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6892      	ldr	r2, [r2, #8]
 80044d6:	0211      	lsls	r1, r2, #8
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6912      	ldr	r2, [r2, #16]
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	3a01      	subs	r2, #1
 80044e0:	0552      	lsls	r2, r2, #21
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6852      	ldr	r2, [r2, #4]
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	6143      	str	r3, [r0, #20]
 80044f2:	e014      	b.n	800451e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044f4:	481e      	ldr	r0, [pc, #120]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <RCCEx_PLLSAI2_Config+0x1dc>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6892      	ldr	r2, [r2, #8]
 8004502:	0211      	lsls	r1, r2, #8
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6952      	ldr	r2, [r2, #20]
 8004508:	0852      	lsrs	r2, r2, #1
 800450a:	3a01      	subs	r2, #1
 800450c:	0652      	lsls	r2, r2, #25
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	3a01      	subs	r2, #1
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	430a      	orrs	r2, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd fadd 	bl	8001ae8 <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004530:	e009      	b.n	8004546 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004532:	f7fd fad9 	bl	8001ae8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d902      	bls.n	8004546 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	73fb      	strb	r3, [r7, #15]
          break;
 8004544:	e005      	b.n	8004552 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004558:	4905      	ldr	r1, [pc, #20]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <RCCEx_PLLSAI2_Config+0x1d0>)
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	07ff800f 	.word	0x07ff800f
 8004578:	ff9f800f 	.word	0xff9f800f
 800457c:	f9ff800f 	.word	0xf9ff800f

08004580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e093      	b.n	80046ba <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a2:	d009      	beq.n	80045b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
 80045aa:	e005      	b.n	80045b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd f95c 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045f8:	d902      	bls.n	8004600 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e002      	b.n	8004606 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800460e:	d007      	beq.n	8004620 <HAL_SPI_Init+0xa0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6852      	ldr	r2, [r2, #4]
 8004628:	f402 7182 	and.w	r1, r2, #260	; 0x104
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6912      	ldr	r2, [r2, #16]
 800463a:	f002 0202 	and.w	r2, r2, #2
 800463e:	4311      	orrs	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6952      	ldr	r2, [r2, #20]
 8004644:	f002 0201 	and.w	r2, r2, #1
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6992      	ldr	r2, [r2, #24]
 800464e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	69d2      	ldr	r2, [r2, #28]
 8004658:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6a12      	ldr	r2, [r2, #32]
 8004662:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004666:	4311      	orrs	r1, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800466c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6992      	ldr	r2, [r2, #24]
 800467c:	0c12      	lsrs	r2, r2, #16
 800467e:	f002 0104 	and.w	r1, r2, #4
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004686:	f002 0210 	and.w	r2, r2, #16
 800468a:	4311      	orrs	r1, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004690:	f002 0208 	and.w	r2, r2, #8
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800469e:	4311      	orrs	r1, r2
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b088      	sub	sp, #32
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_SPI_Transmit+0x22>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e156      	b.n	8004992 <HAL_SPI_Transmit+0x2d0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ec:	f7fd f9fc 	bl	8001ae8 <HAL_GetTick>
 80046f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004706:	e13b      	b.n	8004980 <HAL_SPI_Transmit+0x2be>
  }

  if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_SPI_Transmit+0x52>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004718:	e132      	b.n	8004980 <HAL_SPI_Transmit+0x2be>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2203      	movs	r2, #3
 800471e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004764:	d10f      	bne.n	8004786 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004774:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004784:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d007      	beq.n	80047a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047ac:	d94b      	bls.n	8004846 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0xfa>
 80047b6:	8afb      	ldrh	r3, [r7, #22]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d13e      	bne.n	800483a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c4:	8812      	ldrh	r2, [r2, #0]
 80047c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047e0:	e02b      	b.n	800483a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d112      	bne.n	8004816 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004814:	e011      	b.n	800483a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004816:	f7fd f967 	bl	8001ae8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d303      	bcc.n	800482e <HAL_SPI_Transmit+0x16c>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d102      	bne.n	8004834 <HAL_SPI_Transmit+0x172>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004838:	e0a2      	b.n	8004980 <HAL_SPI_Transmit+0x2be>
    while (hspi->TxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ce      	bne.n	80047e2 <HAL_SPI_Transmit+0x120>
 8004844:	e07c      	b.n	8004940 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x192>
 800484e:	8afb      	ldrh	r3, [r7, #22]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d170      	bne.n	8004936 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d912      	bls.n	8004884 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b02      	subs	r3, #2
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004882:	e058      	b.n	8004936 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80048aa:	e044      	b.n	8004936 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d12b      	bne.n	8004912 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d912      	bls.n	80048ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b02      	subs	r3, #2
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048e8:	e025      	b.n	8004936 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004910:	e011      	b.n	8004936 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004912:	f7fd f8e9 	bl	8001ae8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d303      	bcc.n	800492a <HAL_SPI_Transmit+0x268>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Transmit+0x26e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004934:	e024      	b.n	8004980 <HAL_SPI_Transmit+0x2be>
    while (hspi->TxXferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1b5      	bne.n	80048ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f943 	bl	8004bd0 <SPI_EndRxTxTransaction>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_SPI_Transmit+0x2be>
  {
    errorcode = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004990:	7ffb      	ldrb	r3, [r7, #31]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049ac:	f7fd f89c 	bl	8001ae8 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	1a9a      	subs	r2, r3, r2
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049bc:	f7fd f894 	bl	8001ae8 <HAL_GetTick>
 80049c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	015b      	lsls	r3, r3, #5
 80049c8:	0d1b      	lsrs	r3, r3, #20
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049d2:	e054      	b.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d050      	beq.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049dc:	f7fd f884 	bl	8001ae8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d202      	bcs.n	80049f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d13d      	bne.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d111      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a14:	d004      	beq.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d107      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a38:	d10f      	bne.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e017      	b.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	401a      	ands	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d19b      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000

08004aac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004aba:	f7fd f815 	bl	8001ae8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	1a9a      	subs	r2, r3, r2
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aca:	f7fd f80d 	bl	8001ae8 <HAL_GetTick>
 8004ace:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ad0:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00da      	lsls	r2, r3, #3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	0d1b      	lsrs	r3, r3, #20
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ae8:	e062      	b.n	8004bb0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004af0:	d109      	bne.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004b04:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d050      	beq.n	8004bb0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b0e:	f7fc ffeb 	bl	8001ae8 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d202      	bcs.n	8004b24 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d13d      	bne.n	8004ba0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	6852      	ldr	r2, [r2, #4]
 8004b2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3c:	d111      	bne.n	8004b62 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b46:	d004      	beq.n	8004b52 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d107      	bne.n	8004b62 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	d10f      	bne.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e010      	b.n	8004bc2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	401a      	ands	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d194      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff ff5f 	bl	8004aac <SPI_WaitFifoStateUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e027      	b.n	8004c54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fec4 	bl	800499c <SPI_WaitFlagStateUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e014      	b.n	8004c54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff38 	bl	8004aac <SPI_WaitFifoStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e000      	b.n	8004c54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e042      	b.n	8004cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fc fda9 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2224      	movs	r2, #36	; 0x24
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f82c 	bl	8004cfc <UART_SetConfig>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e022      	b.n	8004cf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fae2 	bl	8005280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	6892      	ldr	r2, [r2, #8]
 8004cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb69 	bl	80053c4 <UART_CheckIdleState>
 8004cf2:	4603      	mov	r3, r0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b5b0      	push	{r4, r5, r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	4bb2      	ldr	r3, [pc, #712]	; (8004ff4 <UART_SetConfig+0x2f8>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68d2      	ldr	r2, [r2, #12]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4aa8      	ldr	r2, [pc, #672]	; (8004ff8 <UART_SetConfig+0x2fc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d86:	f022 010f 	bic.w	r1, r2, #15
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a99      	ldr	r2, [pc, #612]	; (8004ffc <UART_SetConfig+0x300>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d121      	bne.n	8004de0 <UART_SetConfig+0xe4>
 8004d9c:	4b98      	ldr	r3, [pc, #608]	; (8005000 <UART_SetConfig+0x304>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d816      	bhi.n	8004dd8 <UART_SetConfig+0xdc>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0xb4>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dcd 	.word	0x08004dcd
 8004db8:	08004dc7 	.word	0x08004dc7
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e0e8      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e0e5      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e0e2      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e0df      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	bf00      	nop
 8004dde:	e0db      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a87      	ldr	r2, [pc, #540]	; (8005004 <UART_SetConfig+0x308>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d134      	bne.n	8004e54 <UART_SetConfig+0x158>
 8004dea:	4b85      	ldr	r3, [pc, #532]	; (8005000 <UART_SetConfig+0x304>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d829      	bhi.n	8004e4c <UART_SetConfig+0x150>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x104>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e4d 	.word	0x08004e4d
 8004e08:	08004e4d 	.word	0x08004e4d
 8004e0c:	08004e4d 	.word	0x08004e4d
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e4d 	.word	0x08004e4d
 8004e18:	08004e4d 	.word	0x08004e4d
 8004e1c:	08004e4d 	.word	0x08004e4d
 8004e20:	08004e3b 	.word	0x08004e3b
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e4d 	.word	0x08004e4d
 8004e30:	08004e47 	.word	0x08004e47
 8004e34:	2300      	movs	r3, #0
 8004e36:	76fb      	strb	r3, [r7, #27]
 8004e38:	e0ae      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	76fb      	strb	r3, [r7, #27]
 8004e3e:	e0ab      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e40:	2304      	movs	r3, #4
 8004e42:	76fb      	strb	r3, [r7, #27]
 8004e44:	e0a8      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e46:	2308      	movs	r3, #8
 8004e48:	76fb      	strb	r3, [r7, #27]
 8004e4a:	e0a5      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	76fb      	strb	r3, [r7, #27]
 8004e50:	bf00      	nop
 8004e52:	e0a1      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a6b      	ldr	r2, [pc, #428]	; (8005008 <UART_SetConfig+0x30c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d120      	bne.n	8004ea0 <UART_SetConfig+0x1a4>
 8004e5e:	4b68      	ldr	r3, [pc, #416]	; (8005000 <UART_SetConfig+0x304>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d00f      	beq.n	8004e8c <UART_SetConfig+0x190>
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d802      	bhi.n	8004e76 <UART_SetConfig+0x17a>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0x184>
 8004e74:	e010      	b.n	8004e98 <UART_SetConfig+0x19c>
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d005      	beq.n	8004e86 <UART_SetConfig+0x18a>
 8004e7a:	2b30      	cmp	r3, #48	; 0x30
 8004e7c:	d009      	beq.n	8004e92 <UART_SetConfig+0x196>
 8004e7e:	e00b      	b.n	8004e98 <UART_SetConfig+0x19c>
 8004e80:	2300      	movs	r3, #0
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e088      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e86:	2302      	movs	r3, #2
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e085      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e082      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e92:	2308      	movs	r3, #8
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e07f      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	bf00      	nop
 8004e9e:	e07b      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a59      	ldr	r2, [pc, #356]	; (800500c <UART_SetConfig+0x310>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d120      	bne.n	8004eec <UART_SetConfig+0x1f0>
 8004eaa:	4b55      	ldr	r3, [pc, #340]	; (8005000 <UART_SetConfig+0x304>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d00f      	beq.n	8004ed8 <UART_SetConfig+0x1dc>
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d802      	bhi.n	8004ec2 <UART_SetConfig+0x1c6>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <UART_SetConfig+0x1d0>
 8004ec0:	e010      	b.n	8004ee4 <UART_SetConfig+0x1e8>
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d005      	beq.n	8004ed2 <UART_SetConfig+0x1d6>
 8004ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec8:	d009      	beq.n	8004ede <UART_SetConfig+0x1e2>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x1e8>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	e062      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	76fb      	strb	r3, [r7, #27]
 8004ed6:	e05f      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	76fb      	strb	r3, [r7, #27]
 8004edc:	e05c      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	76fb      	strb	r3, [r7, #27]
 8004ee2:	e059      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	76fb      	strb	r3, [r7, #27]
 8004ee8:	bf00      	nop
 8004eea:	e055      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a47      	ldr	r2, [pc, #284]	; (8005010 <UART_SetConfig+0x314>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d124      	bne.n	8004f40 <UART_SetConfig+0x244>
 8004ef6:	4b42      	ldr	r3, [pc, #264]	; (8005000 <UART_SetConfig+0x304>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f04:	d012      	beq.n	8004f2c <UART_SetConfig+0x230>
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d802      	bhi.n	8004f12 <UART_SetConfig+0x216>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <UART_SetConfig+0x224>
 8004f10:	e012      	b.n	8004f38 <UART_SetConfig+0x23c>
 8004f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f16:	d006      	beq.n	8004f26 <UART_SetConfig+0x22a>
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d009      	beq.n	8004f32 <UART_SetConfig+0x236>
 8004f1e:	e00b      	b.n	8004f38 <UART_SetConfig+0x23c>
 8004f20:	2300      	movs	r3, #0
 8004f22:	76fb      	strb	r3, [r7, #27]
 8004f24:	e038      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f26:	2302      	movs	r3, #2
 8004f28:	76fb      	strb	r3, [r7, #27]
 8004f2a:	e035      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	e032      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f32:	2308      	movs	r3, #8
 8004f34:	76fb      	strb	r3, [r7, #27]
 8004f36:	e02f      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	bf00      	nop
 8004f3e:	e02b      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <UART_SetConfig+0x2fc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d124      	bne.n	8004f94 <UART_SetConfig+0x298>
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <UART_SetConfig+0x304>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f58:	d012      	beq.n	8004f80 <UART_SetConfig+0x284>
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d802      	bhi.n	8004f66 <UART_SetConfig+0x26a>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <UART_SetConfig+0x278>
 8004f64:	e012      	b.n	8004f8c <UART_SetConfig+0x290>
 8004f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6a:	d006      	beq.n	8004f7a <UART_SetConfig+0x27e>
 8004f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f70:	d009      	beq.n	8004f86 <UART_SetConfig+0x28a>
 8004f72:	e00b      	b.n	8004f8c <UART_SetConfig+0x290>
 8004f74:	2300      	movs	r3, #0
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e00e      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	76fb      	strb	r3, [r7, #27]
 8004f7e:	e00b      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f80:	2304      	movs	r3, #4
 8004f82:	76fb      	strb	r3, [r7, #27]
 8004f84:	e008      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f86:	2308      	movs	r3, #8
 8004f88:	76fb      	strb	r3, [r7, #27]
 8004f8a:	e005      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	76fb      	strb	r3, [r7, #27]
 8004f90:	bf00      	nop
 8004f92:	e001      	b.n	8004f98 <UART_SetConfig+0x29c>
 8004f94:	2310      	movs	r3, #16
 8004f96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <UART_SetConfig+0x2fc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f040 8096 	bne.w	80050d0 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa4:	7efb      	ldrb	r3, [r7, #27]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d836      	bhi.n	8005018 <UART_SetConfig+0x31c>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x2b4>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08005019 	.word	0x08005019
 8004fc0:	08004fe3 	.word	0x08004fe3
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08004feb 	.word	0x08004feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fcde 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	6178      	str	r0, [r7, #20]
        break;
 8004fda:	e022      	b.n	8005022 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <UART_SetConfig+0x318>)
 8004fde:	617b      	str	r3, [r7, #20]
        break;
 8004fe0:	e01f      	b.n	8005022 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe2:	f7fe fc41 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8004fe6:	6178      	str	r0, [r7, #20]
        break;
 8004fe8:	e01b      	b.n	8005022 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	617b      	str	r3, [r7, #20]
        break;
 8004ff0:	e017      	b.n	8005022 <UART_SetConfig+0x326>
 8004ff2:	bf00      	nop
 8004ff4:	cfff69f3 	.word	0xcfff69f3
 8004ff8:	40008000 	.word	0x40008000
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40021000 	.word	0x40021000
 8005004:	40004400 	.word	0x40004400
 8005008:	40004800 	.word	0x40004800
 800500c:	40004c00 	.word	0x40004c00
 8005010:	40005000 	.word	0x40005000
 8005014:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	76bb      	strb	r3, [r7, #26]
        break;
 8005020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8113 	beq.w	8005250 <UART_SetConfig+0x554>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	4a92      	ldr	r2, [pc, #584]	; (8005278 <UART_SetConfig+0x57c>)
 8005030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005034:	461a      	mov	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fbb3 f3f2 	udiv	r3, r3, r2
 800503c:	613b      	str	r3, [r7, #16]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	441a      	add	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d805      	bhi.n	800505a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d202      	bcs.n	8005060 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	76bb      	strb	r3, [r7, #26]
 800505e:	e0f7      	b.n	8005250 <UART_SetConfig+0x554>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4618      	mov	r0, r3
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	4a82      	ldr	r2, [pc, #520]	; (8005278 <UART_SetConfig+0x57c>)
 800506e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005072:	b29a      	uxth	r2, r3
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f7fb f8c0 	bl	80001fc <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	021d      	lsls	r5, r3, #8
 8005082:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005086:	0214      	lsls	r4, r2, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	461a      	mov	r2, r3
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	18a0      	adds	r0, r4, r2
 8005096:	eb45 0103 	adc.w	r1, r5, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f04f 0400 	mov.w	r4, #0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4623      	mov	r3, r4
 80050a6:	f7fb f8a9 	bl	80001fc <__aeabi_uldivmod>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	60fb      	str	r3, [r7, #12]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b6:	d308      	bcc.n	80050ca <UART_SetConfig+0x3ce>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d204      	bcs.n	80050ca <UART_SetConfig+0x3ce>
        {
          huart->Instance->BRR = usartdiv;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e0c2      	b.n	8005250 <UART_SetConfig+0x554>
        }
        else
        {
          ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	76bb      	strb	r3, [r7, #26]
 80050ce:	e0bf      	b.n	8005250 <UART_SetConfig+0x554>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d165      	bne.n	80051a6 <UART_SetConfig+0x4aa>
  {
    switch (clocksource)
 80050da:	7efb      	ldrb	r3, [r7, #27]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d828      	bhi.n	8005132 <UART_SetConfig+0x436>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x3ec>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	08005133 	.word	0x08005133
 80050f8:	08005123 	.word	0x08005123
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
 8005108:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe fc42 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 8005110:	6178      	str	r0, [r7, #20]
        break;
 8005112:	e013      	b.n	800513c <UART_SetConfig+0x440>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7fe fc54 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 8005118:	6178      	str	r0, [r7, #20]
        break;
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x440>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <UART_SetConfig+0x580>)
 800511e:	617b      	str	r3, [r7, #20]
        break;
 8005120:	e00c      	b.n	800513c <UART_SetConfig+0x440>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fe fba1 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8005126:	6178      	str	r0, [r7, #20]
        break;
 8005128:	e008      	b.n	800513c <UART_SetConfig+0x440>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e004      	b.n	800513c <UART_SetConfig+0x440>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	76bb      	strb	r3, [r7, #26]
        break;
 800513a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8086 	beq.w	8005250 <UART_SetConfig+0x554>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	4a4b      	ldr	r2, [pc, #300]	; (8005278 <UART_SetConfig+0x57c>)
 800514a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514e:	461a      	mov	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	fbb3 f3f2 	udiv	r3, r3, r2
 8005156:	005a      	lsls	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	441a      	add	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	b29b      	uxth	r3, r3
 800516a:	60fb      	str	r3, [r7, #12]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d916      	bls.n	80051a0 <UART_SetConfig+0x4a4>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005178:	d212      	bcs.n	80051a0 <UART_SetConfig+0x4a4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f023 030f 	bic.w	r3, r3, #15
 8005182:	817b      	strh	r3, [r7, #10]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	b29a      	uxth	r2, r3
 8005190:	897b      	ldrh	r3, [r7, #10]
 8005192:	4313      	orrs	r3, r2
 8005194:	817b      	strh	r3, [r7, #10]
        huart->Instance->BRR = brrtemp;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	897a      	ldrh	r2, [r7, #10]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	e057      	b.n	8005250 <UART_SetConfig+0x554>
      }
      else
      {
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	76bb      	strb	r3, [r7, #26]
 80051a4:	e054      	b.n	8005250 <UART_SetConfig+0x554>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a6:	7efb      	ldrb	r3, [r7, #27]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d828      	bhi.n	80051fe <UART_SetConfig+0x502>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x4b8>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ff 	.word	0x080051ff
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fe fbdc 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 80051dc:	6178      	str	r0, [r7, #20]
        break;
 80051de:	e013      	b.n	8005208 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fe fbee 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 80051e4:	6178      	str	r0, [r7, #20]
        break;
 80051e6:	e00f      	b.n	8005208 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <UART_SetConfig+0x580>)
 80051ea:	617b      	str	r3, [r7, #20]
        break;
 80051ec:	e00c      	b.n	8005208 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fb3b 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 80051f2:	6178      	str	r0, [r7, #20]
        break;
 80051f4:	e008      	b.n	8005208 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	617b      	str	r3, [r7, #20]
        break;
 80051fc:	e004      	b.n	8005208 <UART_SetConfig+0x50c>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	76bb      	strb	r3, [r7, #26]
        break;
 8005206:	bf00      	nop
    }

    if (pclk != 0U)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d020      	beq.n	8005250 <UART_SetConfig+0x554>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	4a19      	ldr	r2, [pc, #100]	; (8005278 <UART_SetConfig+0x57c>)
 8005214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005218:	461a      	mov	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	441a      	add	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	b29b      	uxth	r3, r3
 8005232:	60fb      	str	r3, [r7, #12]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d908      	bls.n	800524c <UART_SetConfig+0x550>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d204      	bcs.n	800524c <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = usartdiv;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	e001      	b.n	8005250 <UART_SetConfig+0x554>
      }
      else
      {
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800526c:	7ebb      	ldrb	r3, [r7, #26]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bdb0      	pop	{r4, r5, r7, pc}
 8005276:	bf00      	nop
 8005278:	080058b8 	.word	0x080058b8
 800527c:	00f42400 	.word	0x00f42400

08005280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	6852      	ldr	r2, [r2, #4]
 80052c0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	6852      	ldr	r2, [r2, #4]
 80052e2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	6852      	ldr	r2, [r2, #4]
 8005304:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	6892      	ldr	r2, [r2, #8]
 8005326:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01a      	beq.n	8005396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537e:	d10a      	bne.n	8005396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	6852      	ldr	r2, [r2, #4]
 800538a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	6852      	ldr	r2, [r2, #4]
 80053ac:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d4:	f7fc fb88 	bl	8001ae8 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d10e      	bne.n	8005406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f82f 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e025      	b.n	8005452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d10e      	bne.n	8005432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f819 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546a:	e062      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d05e      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fc fb38 	bl	8001ae8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d802      	bhi.n	800548a <UART_WaitOnFlagUntilTimeout+0x30>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11d      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005498:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	6892      	ldr	r2, [r2, #8]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e045      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02e      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d126      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054fc:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	6892      	ldr	r2, [r2, #8]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e00f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	401a      	ands	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d08d      	beq.n	800546c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UARTEx_DisableFifoMode+0x16>
 800556c:	2302      	movs	r3, #2
 800556e:	e027      	b.n	80055c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800559e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e02d      	b.n	8005640 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f84f 	bl	80056c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800565c:	2302      	movs	r3, #2
 800565e:	e02d      	b.n	80056bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	6892      	ldr	r2, [r2, #8]
 8005692:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f811 	bl	80056c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056e4:	e031      	b.n	800574a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056e6:	2308      	movs	r3, #8
 80056e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056ea:	2308      	movs	r3, #8
 80056ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0e5b      	lsrs	r3, r3, #25
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	0f5b      	lsrs	r3, r3, #29
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	7b3a      	ldrb	r2, [r7, #12]
 8005712:	4911      	ldr	r1, [pc, #68]	; (8005758 <UARTEx_SetNbDataToProcess+0x94>)
 8005714:	5c8a      	ldrb	r2, [r1, r2]
 8005716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800571a:	7b3a      	ldrb	r2, [r7, #12]
 800571c:	490f      	ldr	r1, [pc, #60]	; (800575c <UARTEx_SetNbDataToProcess+0x98>)
 800571e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005720:	fb93 f3f2 	sdiv	r3, r3, r2
 8005724:	b29a      	uxth	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	7b7a      	ldrb	r2, [r7, #13]
 8005730:	4909      	ldr	r1, [pc, #36]	; (8005758 <UARTEx_SetNbDataToProcess+0x94>)
 8005732:	5c8a      	ldrb	r2, [r1, r2]
 8005734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005738:	7b7a      	ldrb	r2, [r7, #13]
 800573a:	4908      	ldr	r1, [pc, #32]	; (800575c <UARTEx_SetNbDataToProcess+0x98>)
 800573c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800573e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	080058d0 	.word	0x080058d0
 800575c:	080058d8 	.word	0x080058d8

08005760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005764:	f7fc f926 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005768:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800576a:	e003      	b.n	8005774 <LoopCopyDataInit>

0800576c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800576e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005770:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005772:	3104      	adds	r1, #4

08005774 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005774:	480a      	ldr	r0, [pc, #40]	; (80057a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005778:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800577a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800577c:	d3f6      	bcc.n	800576c <CopyDataInit>
	ldr	r2, =_sbss
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005780:	e002      	b.n	8005788 <LoopFillZerobss>

08005782 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005782:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005784:	f842 3b04 	str.w	r3, [r2], #4

08005788 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <LoopForever+0x16>)
	cmp	r2, r3
 800578a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800578c:	d3f9      	bcc.n	8005782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800578e:	f000 f811 	bl	80057b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005792:	f7fb fca1 	bl	80010d8 <main>

08005796 <LoopForever>:

LoopForever:
    b LoopForever
 8005796:	e7fe      	b.n	8005796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005798:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800579c:	080058f0 	.word	0x080058f0
	ldr	r0, =_sdata
 80057a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80057a4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80057a8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80057ac:	200001c8 	.word	0x200001c8

080057b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057b0:	e7fe      	b.n	80057b0 <ADC1_IRQHandler>
	...

080057b4 <__libc_init_array>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4e0d      	ldr	r6, [pc, #52]	; (80057ec <__libc_init_array+0x38>)
 80057b8:	4c0d      	ldr	r4, [pc, #52]	; (80057f0 <__libc_init_array+0x3c>)
 80057ba:	1ba4      	subs	r4, r4, r6
 80057bc:	10a4      	asrs	r4, r4, #2
 80057be:	2500      	movs	r5, #0
 80057c0:	42a5      	cmp	r5, r4
 80057c2:	d109      	bne.n	80057d8 <__libc_init_array+0x24>
 80057c4:	4e0b      	ldr	r6, [pc, #44]	; (80057f4 <__libc_init_array+0x40>)
 80057c6:	4c0c      	ldr	r4, [pc, #48]	; (80057f8 <__libc_init_array+0x44>)
 80057c8:	f000 f820 	bl	800580c <_init>
 80057cc:	1ba4      	subs	r4, r4, r6
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	2500      	movs	r5, #0
 80057d2:	42a5      	cmp	r5, r4
 80057d4:	d105      	bne.n	80057e2 <__libc_init_array+0x2e>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057dc:	4798      	blx	r3
 80057de:	3501      	adds	r5, #1
 80057e0:	e7ee      	b.n	80057c0 <__libc_init_array+0xc>
 80057e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057e6:	4798      	blx	r3
 80057e8:	3501      	adds	r5, #1
 80057ea:	e7f2      	b.n	80057d2 <__libc_init_array+0x1e>
 80057ec:	080058e8 	.word	0x080058e8
 80057f0:	080058e8 	.word	0x080058e8
 80057f4:	080058e8 	.word	0x080058e8
 80057f8:	080058ec 	.word	0x080058ec

080057fc <memset>:
 80057fc:	4402      	add	r2, r0
 80057fe:	4603      	mov	r3, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <_init>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr

08005818 <_fini>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr
